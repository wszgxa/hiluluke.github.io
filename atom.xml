<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hilu&#39;s note</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hiluluke.cn/"/>
  <updated>2016-08-25T04:18:57.000Z</updated>
  <id>http://hiluluke.cn/</id>
  
  <author>
    <name>hiluluke</name>
    <email>hiluluke@hotmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Vue快速开发单页应用</title>
    <link href="http://hiluluke.cn/2016/08/25/vue-control/"/>
    <id>http://hiluluke.cn/2016/08/25/vue-control/</id>
    <published>2016-08-24T16:00:00.000Z</published>
    <updated>2016-08-25T04:18:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文所涉及代码全在<a href="https://github.com/wszgxa/vue-cnode" target="_blank" rel="external">vue-cnode</a></p>
</blockquote>
<p><img src="https://segmentfault.com/image?src=http://7fvhwe.com1.z0.glb.clouddn.com/fileStruct.png&amp;objectId=1190000006711743&amp;token=2a95eb1caab2bdfd1b495e76acce1574" alt="文件结构"></p>
<p>上图是我们demo项目的整体结构，我们可以看见在第三级有三个东西router,全局组件，功能组件。其中全局组件和功能组件是脱离于router的，因为这两部分是所有逻辑组件共有的。我们将他提出来，放在App.vue里面而不是放在router下面的路由组件中，是为了只引用一次然后全局调用。</p>
<p>但是，具体的路由逻辑组件需要展现的全局组件内容是不一样的，需要功能组件交互的内容也不一样，所以需要在不同的路由逻辑组件中对全局组件和功能组件进行控制。</p>
<p>本文就是介绍如何通过vuex对全局组件和功能组件进行控制的。</p>
<a id="more"></a>
<h2 id="使用vuex传递逻辑数据"><a href="#使用vuex传递逻辑数据" class="headerlink" title="使用vuex传递逻辑数据"></a>使用vuex传递逻辑数据</h2><p>说是控制，其实就是组件间交互，vue中组件交互有很多方式，我们这里用vuex。</p>
<p>我们将单独建立一个module(doc_state)，用来做功能组件和全局组件的功能交互，在module中我们将初始化功能组件或则全局组件需要的数据和函数方法等。如下图所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// doc state 需要一些变量来记录文档状态</div><div class="line">import &#123;</div><div class="line">  SET_TIP</div><div class="line">&#125; from &apos;../mutation_types&apos;</div><div class="line">const state = &#123;</div><div class="line">  tip: &#123;</div><div class="line">    text: &apos;&apos;,</div><div class="line">    time: 2000,</div><div class="line">    callback: null</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">const mutations = &#123;</div><div class="line">  [SET_TIP] (state, tip) &#123;</div><div class="line">    state.tip = tip</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">export default &#123;</div><div class="line">  state,</div><div class="line">  mutations</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们以tip（提示）组件为例子讲解，所有doc modules在<code>/src/vuex/modules/doc_state</code>。</p>
<p>然后我们定义doc_actions定义我们的action:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import * as types from &apos;../mutation_types&apos;</div><div class="line"></div><div class="line">export const setTip = (&#123;dispatch&#125;, tip) =&gt; &#123;</div><div class="line">  if (!tip.time) tip.time = 2000 // 默认tip展现时间</div><div class="line">  dispatch(types.SET_TIP, tip)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>actions，会在路由逻辑组件中引用，调用action就能控制我们的tip组件。</p>
<p>再把 doc_state挂载到store.js就可以了～</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">import docState from &apos;./modules/doc_state&apos;</div><div class="line">export default new Vuex.Store(&#123;</div><div class="line">  modules: &#123;</div><div class="line">    docState,</div><div class="line">    content,</div><div class="line">    userInfo</div><div class="line">  &#125;,</div><div class="line">  strict: debug,</div><div class="line">  middlewares: debug ? [] : []</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="tip组件"><a href="#tip组件" class="headerlink" title="tip组件"></a>tip组件</h2><p>在我们的common文件夹里面新建一个tip.vue。他就是我们的提示信息组件。（路径<code>/src/components/common/tip.vue</code>）</p>
<p>首先我们需要获取tip在vuex里面的数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vuex: &#123;</div><div class="line">  getters: &#123;</div><div class="line">    tip: (&#123; docState &#125;) =&gt; docState.tip</div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>然后就是具体的逻辑了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">data () &#123;</div><div class="line">  return &#123;</div><div class="line">    tipVisible: false</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">watch: &#123;</div><div class="line">  tip: &apos;tipShow&apos;</div><div class="line">&#125;,</div><div class="line">methods: &#123;</div><div class="line">  tipShow () &#123;</div><div class="line">    let self = this</div><div class="line">    self.tipVisible = true</div><div class="line">    setTimeout(function () &#123;</div><div class="line">      self.tipVisible = false</div><div class="line">      if (self.tip.callback) &#123;</div><div class="line">        self.tip.callback()</div><div class="line">      &#125;</div><div class="line">    &#125;, self.tip.time)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的tipVisible是我们用来控制控制展示的变量，在template里面：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"tipVisible"</span> <span class="attr">class</span>=<span class="string">"tip"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tip-wrap"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; tip.text &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>tip组件一共做了三件事：</p>
<ol>
<li>监听vuex获取的tip变量，在tip变量改变时执行tipShow方法。</li>
<li>展示信息</li>
<li>展示时间结束后，执行回调函数（如果有）</li>
</ol>
<p>上面就完成了tip组件的整套逻辑，最后我们还需要把tip组件挂在App.vue。</p>
<p>template:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">cn-header</span>&gt;</span><span class="tag">&lt;/<span class="name">cn-header</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">sidebar</span>&gt;</span><span class="tag">&lt;/<span class="name">sidebar</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tip</span>&gt;</span><span class="tag">&lt;/<span class="name">tip</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">loading</span>&gt;</span><span class="tag">&lt;/<span class="name">loading</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tip <span class="keyword">from</span> <span class="string">'./components/common/tip'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  components: &#123;</div><div class="line">    tip,</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样我们就能在所有路由逻辑组件调用了。</p>
<h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><p>拿<a href="http://hiluluke.cn/2016/08/20/vue-first/">登录组件</a>作为例子。</p>
<p>首先我们需要引入action:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import &#123; setMenu, setTip &#125; from &apos;../../vuex/actions/doc_actions&apos;</div><div class="line">export default &#123;</div><div class="line">  vuex: &#123;</div><div class="line">    actions: &#123;</div><div class="line">      setTip,</div><div class="line">      setDetail</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们在登录出错的时候会给用户提示信息：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.setBaseInfo(<span class="keyword">this</span>.access, (res) =&gt; &#123;</div><div class="line">  <span class="keyword">if</span> (res.success) &#123;</div><div class="line">    <span class="keyword">this</span>.success()</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.setTip(&#123;</div><div class="line">    text: res.msg</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>只要调用<code>this.setTip</code>方法就可以了。是不是很简单？组件写好后，后面大家再使用就只需调用这一个方法。</p>
<p><em>注意</em><br>这里需要主要传入回调函数的this的指向。建议这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.setTip(&#123;</div><div class="line">  text: <span class="string">'lala'</span>,</div><div class="line">  callback: () =&gt; &#123;</div><div class="line">    <span class="keyword">this</span>.xxx()</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>箭头函数有个作用就是会绑定它声明地方的this。这样我们就可以在callback里面调用当前组件的方法了。不用箭头函数，bind一下也是可以的～</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>你可以发现我们的组件交互完全是通过数据去控制的。在搭建功能组件和vuex的module时会复杂一点，但是逻辑更清晰，我们在debug时候也更方便。在子组件调用时也非常的简单，就相当提供了一个接口。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文所涉及代码全在&lt;a href=&quot;https://github.com/wszgxa/vue-cnode&quot;&gt;vue-cnode&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://segmentfault.com/image?src=http://7fvhwe.com1.z0.glb.clouddn.com/fileStruct.png&amp;amp;objectId=1190000006711743&amp;amp;token=2a95eb1caab2bdfd1b495e76acce1574&quot; alt=&quot;文件结构&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图是我们demo项目的整体结构，我们可以看见在第三级有三个东西router,全局组件，功能组件。其中全局组件和功能组件是脱离于router的，因为这两部分是所有逻辑组件共有的。我们将他提出来，放在App.vue里面而不是放在router下面的路由组件中，是为了只引用一次然后全局调用。&lt;/p&gt;
&lt;p&gt;但是，具体的路由逻辑组件需要展现的全局组件内容是不一样的，需要功能组件交互的内容也不一样，所以需要在不同的路由逻辑组件中对全局组件和功能组件进行控制。&lt;/p&gt;
&lt;p&gt;本文就是介绍如何通过vuex对全局组件和功能组件进行控制的。&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://hiluluke.cn/categories/JS/"/>
    
    
      <category term="vue" scheme="http://hiluluke.cn/tags/vue/"/>
    
      <category term="spa" scheme="http://hiluluke.cn/tags/spa/"/>
    
  </entry>
  
  <entry>
    <title>性能优化笔记</title>
    <link href="http://hiluluke.cn/2016/08/21/Performance-1/"/>
    <id>http://hiluluke.cn/2016/08/21/Performance-1/</id>
    <published>2016-08-20T16:00:00.000Z</published>
    <updated>2016-08-25T08:03:59.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>嗯，搞点大事情</p>
</blockquote>
<p>记录一些大公司，高级前端工程师的前端优化经验总结，并尝试着做些实验，以后肯定用的上，当看到新的技能时，实时更新在这篇文章。</p>
<h2 id="DNS预解析"><a href="#DNS预解析" class="headerlink" title="DNS预解析"></a>DNS预解析</h2><p>我们请求资源时，通常都是一个URL，拿到正确的ip地址必须经过一步DNS解析。DNS预解析的作用是在到某个页面是提前解析了DNS。用法都是这样：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"hiluluke.cn"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在很多大厂，比如jd.com、taobao.com等的head部分你就能看见很多上面这样的link标签。<br>然而其使用方法，并不是像上面这样简单，具体的看<a href="https://segmentfault.com/a/1190000003944417" target="_blank" rel="external">这篇文章</a>，本文不多做解释。</p>
<a id="more"></a>
<h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><p>实验url： </p>
<ul>
<li><a href="http://blog-c1000.codingapp.com/dns/index.html" target="_blank" rel="external">http://blog-c1000.codingapp.com/dns/index.html</a></li>
<li><a href="http://blog-c1000.codingapp.com/dns/entrance.html" target="_blank" rel="external">http://blog-c1000.codingapp.com/dns/entrance.html</a></li>
</ul>
<p>上面两个URL第一个index里面有10个外链css资源，分别来自不同的网站。<br>第二个页面对entrance页面都对第一个页面css资源进行了DNS预解析。</p>
<p>实验流程:</p>
<ul>
<li><p>清除dns缓存（mac下）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo killall mDNSResponder</div></pre></td></tr></table></figure>
</li>
<li><p>在chrome的chrome://net-internals/#dns中也把dns缓存清除掉：</p>
</li>
<li>在chrome里面dev-tool的network。然后打开第一个页面记录时间。</li>
<li>清除dns缓存，打开第二个页面。点击第二个页面链接条换到第一个页面，再次记录时间。</li>
</ul>
<p>实验结果：</p>
<p>未进行dns预解析直接打开第一个页面时：<br><img src="http://7fvhwe.com1.z0.glb.clouddn.com/dns1.png" alt="未进行dns预解析"></p>
<p>进行了dns预解析后跳转打开的页面:<br><img src="http://7fvhwe.com1.z0.glb.clouddn.com/dns2.png" alt="进行了dns预解析后"></p>
<p>上图中第一个图片中深绿色就是dns预解析花费的时间，而在DNS预解析后第二个链接就没有了解析dns的过程。基本上节约的时间大概是300ms左右。</p>
<blockquote>
<p>未完待续</p>
</blockquote>
<h2 id="域名分区"><a href="#域名分区" class="headerlink" title="域名分区"></a>域名分区</h2><!--
## 减少重定向

## 使用CDN

## gzip压缩

## 无状态域名，不传输cookie

## 并行处理请求


## 客户端缓存资源
-->]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;嗯，搞点大事情&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;记录一些大公司，高级前端工程师的前端优化经验总结，并尝试着做些实验，以后肯定用的上，当看到新的技能时，实时更新在这篇文章。&lt;/p&gt;
&lt;h2 id=&quot;DNS预解析&quot;&gt;&lt;a href=&quot;#DNS预解析&quot; class=&quot;headerlink&quot; title=&quot;DNS预解析&quot;&gt;&lt;/a&gt;DNS预解析&lt;/h2&gt;&lt;p&gt;我们请求资源时，通常都是一个URL，拿到正确的ip地址必须经过一步DNS解析。DNS预解析的作用是在到某个页面是提前解析了DNS。用法都是这样：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;dns-prefetch&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;hiluluke.cn&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在很多大厂，比如jd.com、taobao.com等的head部分你就能看见很多上面这样的link标签。&lt;br&gt;然而其使用方法，并不是像上面这样简单，具体的看&lt;a href=&quot;https://segmentfault.com/a/1190000003944417&quot;&gt;这篇文章&lt;/a&gt;，本文不多做解释。&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://hiluluke.cn/categories/JS/"/>
    
    
      <category term="性能" scheme="http://hiluluke.cn/tags/%E6%80%A7%E8%83%BD/"/>
    
      <category term="前端" scheme="http://hiluluke.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>使用Vue快速开发单页应用</title>
    <link href="http://hiluluke.cn/2016/08/20/vue-first/"/>
    <id>http://hiluluke.cn/2016/08/20/vue-first/</id>
    <published>2016-08-19T16:00:00.000Z</published>
    <updated>2016-08-25T03:47:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文所涉及代码全在<a href="https://github.com/wszgxa/vue-cnode" target="_blank" rel="external">vue-cnode</a></p>
</blockquote>
<p>前面两篇都是介绍组织结构和vue-router，从本文开始我们将讲一些如何优雅的用vue编写单页应用。首先我们从登录页面以及开始，因为后续很多其它的页面都需要登录信息。</p>
<h2 id="路由，文件组织"><a href="#路由，文件组织" class="headerlink" title="路由，文件组织"></a>路由，文件组织</h2><p>首先我们第一步肯定是指定一条路由啦，在<code>src/config_router.js</code>里面增加一条路由<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">configRouter</span> (<span class="params">router</span>) </span>&#123;</div><div class="line">  router.map(&#123;</div><div class="line">    <span class="string">'/login'</span>: &#123;</div><div class="line">      name: <span class="string">'login'</span>,</div><div class="line">      title: <span class="string">'登录'</span>,</div><div class="line">      <span class="comment">// es6箭头函数</span></div><div class="line">      component: (resolve) =&gt; <span class="built_in">require</span>([<span class="string">'./components/login/login.vue'</span>], resolve)</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>上面compenents部分，使用了webpack代码分割功能，这样他会安需加在<code>./components/login/login.vue</code>组件。也可以这样写<code>component: require(&#39;./components/login/login.vue&#39;)</code>，这样就不会按需载入了。编译的第一个文件就有这个。</p>
<p>然后我们需要在<code>src/conponengts/</code>下面创建一个login的文件夹一个login.vue的文件。最开始login.vue里面应该是这样的：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;style lang="styl" src='../../assets/styl/login.styl' scoped&gt;&lt;/style&gt;</div><div class="line"></div><div class="line">&lt;template&gt;</div><div class="line">  &lt;section class="content"&gt;</div><div class="line">  // something</div><div class="line">  &lt;/section&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;script&gt;</div><div class="line">  export default &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>上面是vue-loader的结构，你可以看到，样式、模版、js三者很清晰，不像react中的写法全是js，jsx感觉还有点混乱（个人观点）。</p>
<p>上面的style中<code>lang</code>是指定解析语言，我们这里用的是<a href="http://stylus-lang.com/" target="_blank" rel="external">stylus</a>，然后<code>src</code>指定文件路径，最后的一个scoped是指定样式只在当前组件生效。template和script里面的内容就部多介绍了，现在开始编写业务逻辑。</p>
<h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p>这里我们不介绍<a href="https://github.com/vuejs/vuex" target="_blank" rel="external">vuex</a>是个啥，文档在<a href="http://vuex.vuejs.org/" target="_blank" rel="external">这里</a>。</p>
<p>我们需要保存登录的信息，因为在后续的所有接口中去获取数据我们都需要服务器返回的用户信息。这里我们将获取用户信息、保存用户信息逻辑全部拆出来交给vuex。</p>
<h3 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h3><p>先安装vuex：<code>npm install vuex --save</code>，然后我们建一个<code>store</code>。在src文件夹下面创建`/vuex/modules/user_info.js：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// content</span></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  SET_BASEINFO,</div><div class="line">  SET_DETAIL</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'../mutation_types'</span></div><div class="line"><span class="keyword">const</span> state = &#123;</div><div class="line">  <span class="comment">// 保存第一页数据</span></div><div class="line">  id: <span class="string">''</span>,</div><div class="line">  accessToken: <span class="string">''</span>,</div><div class="line">  loginName: <span class="string">''</span>,</div><div class="line">  avatarUrl: <span class="string">''</span>,</div><div class="line">  score: <span class="string">''</span>,</div><div class="line">  recentTopics: <span class="string">''</span>,</div><div class="line">  recentReplies: <span class="string">''</span>,</div><div class="line">  github: <span class="string">''</span>,</div><div class="line">  createAt: <span class="string">''</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> mutations = &#123;</div><div class="line">  <span class="comment">// 设置 token 登录名 头像</span></div><div class="line">  [SET_BASEINFO] (state, data) &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      state.id = data.id</div><div class="line">      state.accessToken = data.accesstoken</div><div class="line">      state.loginName = data.loginname</div><div class="line">      state.avatarUrl = data.avatar_url</div><div class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</div><div class="line">      <span class="built_in">console</span>.log(err)</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  [SET_DETAIL] (state, data) &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      state.score = data.score</div><div class="line">      state.recentTopics = data.recent_topics</div><div class="line">      state.recentReplies = data.recent_replies</div><div class="line">      state.github = data.githubUsername || <span class="string">''</span></div><div class="line">      state.createAt = data.create_at</div><div class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</div><div class="line">      <span class="built_in">console</span>.log(err)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  state,</div><div class="line">  mutations</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面有个<code>mutation_types</code>是用来让mutation唯一的，在mutation_types里面是这样的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// user info</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_BASEINFO = <span class="string">'SET_BASEINFO'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_DETAIL = <span class="string">'SET_DETAIL'</span></div></pre></td></tr></table></figure></p>
<p>用<code>const</code>来保证唯一性。</p>
<p>然后我们需要将modules加到store里面，新建一个<code>/src/vuex/store.js</code>文件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"><span class="keyword">import</span> userInfo <span class="keyword">from</span> <span class="string">'./modules/user_info'</span></div><div class="line">Vue.use(Vuex)</div><div class="line"></div><div class="line"><span class="keyword">const</span> debug = process.env.NODE_ENV !== <span class="string">'production'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</div><div class="line">  modules: &#123;</div><div class="line">    userInfo</div><div class="line">  &#125;,</div><div class="line">  strict: debug,</div><div class="line">  middlewares: debug ? [] : []</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>再把其在App.vue里面引用，App.vue加入：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./vuex/store'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  store</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样我们就可以用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vuex: &#123;</div><div class="line">  getters: &#123;</div><div class="line">    accessToken: (&#123; userInfo &#125;) =&gt; userInfo.accessToken</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>来获取用户数据了。</p>
<h3 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h3><p>我们将获取用户信息，保存用户信息的逻辑全放在vuex的actions里面，而不是在业务逻辑里面获取，只是在vuex里面保存一下。这样业务逻辑就更扁平了，数据的获取只需要调用一下actions里面的函数，用getter来动态获取。具体代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// /src/vuex/actions/user_actions.js</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'../mutation_types'</span></div><div class="line"><span class="keyword">import</span> &#123; setMsg &#125; <span class="keyword">from</span> <span class="string">'../../tool'</span></div><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">let</span> localStorage = <span class="built_in">window</span>.localStorage</div><div class="line"><span class="keyword">let</span> storeBaseInfo = (data) =&gt; &#123;</div><div class="line">  localStorage.setItem(<span class="string">'cnodeBaseInfo'</span>, <span class="built_in">JSON</span>.stringify(data))</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> storeDetailInfo = (data) =&gt; &#123;</div><div class="line">  localStorage.setItem(<span class="string">'cnodeDetailInfo'</span>, <span class="built_in">JSON</span>.stringify(data))</div><div class="line">&#125;</div><div class="line"><span class="comment">// 获取存储在localStorage中的数据</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> getStore = (&#123; dispatch, state &#125;) =&gt; &#123;</div><div class="line">  <span class="keyword">if</span> (localStorage.getItem(<span class="string">'cnodeBaseInfo'</span>)) &#123;</div><div class="line">    <span class="keyword">let</span> data = <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">'cnodeBaseInfo'</span>))</div><div class="line">    dispatch(types.SET_BASEINFO, data)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (localStorage.getItem(<span class="string">'cnodeDetailInfo'</span>)) &#123;</div><div class="line">    <span class="keyword">let</span> data = <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">'cnodeDetailInfo'</span>))</div><div class="line">    dispatch(types.SET_DETAIL, data)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 设置基础数据</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> setBaseInfo = (&#123; dispatch, state &#125;, token, callback) =&gt; &#123;</div><div class="line">  Vue.http(&#123;</div><div class="line">    url: <span class="string">'/api/v1/accesstoken'</span>,</div><div class="line">    method: <span class="string">'POST'</span>,</div><div class="line">    body: <span class="built_in">JSON</span>.stringify(&#123;</div><div class="line">      accesstoken: token</div><div class="line">    &#125;),</div><div class="line">    headers: &#123;</div><div class="line">      contentType: <span class="string">'application/x-www-form-urlencoded'</span></div><div class="line">    &#125;</div><div class="line">  &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> data = <span class="built_in">JSON</span>.parse(res.data)</div><div class="line">    <span class="keyword">if</span> (data.success) &#123;</div><div class="line">      data.accesstoken = token</div><div class="line">      <span class="keyword">delete</span> data.success</div><div class="line">      storeBaseInfo(data)</div><div class="line">      dispatch(types.SET_BASEINFO, data)</div><div class="line">      callback(setMsg(<span class="literal">true</span>, <span class="string">'登录成功'</span>))</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(data.error_msg)</div><div class="line">      callback(setMsg(<span class="literal">false</span>, data.error_msg))</div><div class="line">    &#125;</div><div class="line">  &#125;).catch(err =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(err)</div><div class="line">    <span class="keyword">let</span> errBody = <span class="built_in">JSON</span>.parse(err.body)</div><div class="line">    callback(setMsg(<span class="literal">false</span>, errBody.error_msg))</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面有个setMsg的函数，只是用来将格式化返回给组件的内容的，把action写的就像一个接口一样。</p>
<p>上面用了<a href="https://github.com/vuejs/vue-resource" target="_blank" rel="external">vue-resource</a>。然后我们做的事主要就件，调用接口，拿数据，错误处理，保存数据到localStorage，返回数据。</p>
<p>接下来，我们看看组件里面的获取数据：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> dialog <span class="keyword">from</span> <span class="string">'../common/dialog'</span></div><div class="line">  <span class="keyword">import</span> &#123; setBaseInfo, setDetail &#125; <span class="keyword">from</span> <span class="string">'../../vuex/actions/user_actions'</span></div><div class="line">  <span class="keyword">import</span> &#123; setMenu, setTip &#125; <span class="keyword">from</span> <span class="string">'../../vuex/actions/doc_actions'</span></div><div class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    vuex: &#123;</div><div class="line">      actions: &#123;</div><div class="line">        setBaseInfo,</div><div class="line">        setMenu,</div><div class="line">        setTip,</div><div class="line">        setDetail</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    data () &#123;</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        config: &#123;</div><div class="line">          visible: <span class="literal">false</span>,</div><div class="line">          text: <span class="string">'在 Cnode社区网站端登录你的账户，然后在右上角找到【设置】按钮，点击进入后将页面滑动到最底部来查看你的Access Token。'</span>,</div><div class="line">          sureText: <span class="string">'确定'</span></div><div class="line">        &#125;,</div><div class="line">        access: <span class="string">''</span></div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">      dialog () &#123;</div><div class="line">        <span class="keyword">this</span>.config.visible = <span class="literal">true</span></div><div class="line">      &#125;,</div><div class="line">      success () &#123;</div><div class="line">        <span class="built_in">window</span>.history.go(<span class="number">-1</span>)</div><div class="line">        <span class="keyword">this</span>.setMenu(<span class="literal">true</span>)</div><div class="line">        <span class="keyword">this</span>.setDetail()</div><div class="line">      &#125;,</div><div class="line">      login () &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.access.length &lt; <span class="number">6</span>) &#123;</div><div class="line">          <span class="keyword">this</span>.setTip(&#123;</div><div class="line">            text: <span class="string">'请输入正确的Access Token'</span></div><div class="line">          &#125;)</div><div class="line">          <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.setBaseInfo(<span class="keyword">this</span>.access, (res) =&gt; &#123;</div><div class="line">          <span class="keyword">if</span> (res.success) &#123;</div><div class="line">            <span class="keyword">this</span>.success()</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">this</span>.setTip(&#123;</div><div class="line">            text: res.msg</div><div class="line">          &#125;)</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    components: &#123;</div><div class="line">      dialog</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>首先引入actions,然后调用，因为返回数据格式事固定的，直接做判断，错误就用dialog弹错错误。是不是很清爽。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>我感觉要仔仔细细把所有全部讲完，篇幅太长了。。。大家还是看看我这做个指引，具体还是看<a href="https://github.com/vuejs/vue-router" target="_blank" rel="external">代码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文所涉及代码全在&lt;a href=&quot;https://github.com/wszgxa/vue-cnode&quot;&gt;vue-cnode&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前面两篇都是介绍组织结构和vue-router，从本文开始我们将讲一些如何优雅的用vue编写单页应用。首先我们从登录页面以及开始，因为后续很多其它的页面都需要登录信息。&lt;/p&gt;
&lt;h2 id=&quot;路由，文件组织&quot;&gt;&lt;a href=&quot;#路由，文件组织&quot; class=&quot;headerlink&quot; title=&quot;路由，文件组织&quot;&gt;&lt;/a&gt;路由，文件组织&lt;/h2&gt;&lt;p&gt;首先我们第一步肯定是指定一条路由啦，在&lt;code&gt;src/config_router.js&lt;/code&gt;里面增加一条路由&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;configRouter&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;router&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  router.map(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;/login&#39;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      name: &lt;span class=&quot;string&quot;&gt;&#39;login&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      title: &lt;span class=&quot;string&quot;&gt;&#39;登录&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// es6箭头函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      component: (resolve) =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;&#39;./components/login/login.vue&#39;&lt;/span&gt;], resolve)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://hiluluke.cn/categories/JS/"/>
    
    
      <category term="vue" scheme="http://hiluluke.cn/tags/vue/"/>
    
      <category term="spa" scheme="http://hiluluke.cn/tags/spa/"/>
    
  </entry>
  
  <entry>
    <title>自动化部署hexo</title>
    <link href="http://hiluluke.cn/2016/08/19/hexo-compress/"/>
    <id>http://hiluluke.cn/2016/08/19/hexo-compress/</id>
    <published>2016-08-18T16:00:00.000Z</published>
    <updated>2016-08-19T03:32:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名小前端，对于页面的优化肯定是有追求的。本文将利用gulp来压缩hexo生成的文件，并利用npm命令自动部署我们的博客。</p>
<h2 id="添加gulp"><a href="#添加gulp" class="headerlink" title="添加gulp"></a>添加gulp</h2><p>首先你需要全局安装gulp: <code>npm install -g gulp</code>。<br><a id="more"></a><br>然后在你的hexo根文件夹下增加一个gulpfile.js:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</div><div class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</div><div class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 压缩 public 目录 css</span></div><div class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</div><div class="line">    .pipe(minifycss())</div><div class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>));</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 压缩 public 目录 html</span></div><div class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</div><div class="line">    .pipe(htmlclean())</div><div class="line">    .pipe(htmlmin(&#123;</div><div class="line">      removeComments: <span class="literal">true</span>,</div><div class="line">      minifyJS: <span class="literal">true</span>,</div><div class="line">      minifyCSS: <span class="literal">true</span>,</div><div class="line">      minifyURLs: <span class="literal">true</span>,</div><div class="line">    &#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [</div><div class="line">  <span class="string">'minify-html'</span>,<span class="string">'minify-css'</span></div><div class="line">]);</div></pre></td></tr></table></figure>
<p>在上面如你所看到，有用4个node_modules，需要安装一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev gulp</div><div class="line">npm install --save-dev gulp-minify-css</div><div class="line">npm install --save-dev gulp-htmlmin</div><div class="line">npm install --save-dev gulp-htmlmin</div></pre></td></tr></table></figure></p>
<p>另外我并没有压缩合并js，我觉得这是主题应该做的。因为hexo的html和css是hexo生成的，而js是最开始写好就直接移动到<code>public</code>的。我觉得压缩js应该主题做，比如这个<a href="https://github.com/wszgxa/hexo-theme-simple" target="_blank" rel="external">主题</a>。</p>
<h2 id="添加自动部署命令"><a href="#添加自动部署命令" class="headerlink" title="添加自动部署命令"></a>添加自动部署命令</h2><p>在package.json里面添加如下命令：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line">  "build": "hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d"</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>然后运行<code>npm run build</code>，我们就会自动删除老文件，生成新文件，压缩html、css然后发布到github或其他静态服务器资源。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一名小前端，对于页面的优化肯定是有追求的。本文将利用gulp来压缩hexo生成的文件，并利用npm命令自动部署我们的博客。&lt;/p&gt;
&lt;h2 id=&quot;添加gulp&quot;&gt;&lt;a href=&quot;#添加gulp&quot; class=&quot;headerlink&quot; title=&quot;添加gulp&quot;&gt;&lt;/a&gt;添加gulp&lt;/h2&gt;&lt;p&gt;首先你需要全局安装gulp: &lt;code&gt;npm install -g gulp&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="Tool" scheme="http://hiluluke.cn/categories/Tool/"/>
    
    
      <category term="hexo" scheme="http://hiluluke.cn/tags/hexo/"/>
    
      <category term="构建工具" scheme="http://hiluluke.cn/tags/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>使用Vue快速开发单页应用</title>
    <link href="http://hiluluke.cn/2016/08/05/vue-router/"/>
    <id>http://hiluluke.cn/2016/08/05/vue-router/</id>
    <published>2016-08-04T16:00:00.000Z</published>
    <updated>2016-08-25T02:47:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文所涉及代码全在<a href="https://github.com/wszgxa/vue-cnode" target="_blank" rel="external">vue-cnode</a></p>
</blockquote>
<p>vue-router主要作用是将路由控制，转移到前端。我们将会在vue-router里面保存一个路由表，在vue中具体通过调用提供的指令或则方法进行跳转。</p>
<p>其实吧，vue-router说白了就是一个插件，对外暴露的也就是指令和方法。如果只要求灵活用起来，我们需要学习的也就3个地方：</p>
<ul>
<li>配置路由</li>
<li>指令</li>
<li>方法</li>
</ul>
<a id="more"></a>
<h2 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h2><p>路由配置其实是分两步的，第一步把vue-router的指令方法挂到Vue实例，第二步才是添加路由配置上。下面是基本的路由配置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'App.vue'</span></div><div class="line">Vue.use(VueRouter) <span class="comment">// 第一步</span></div><div class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">  history: <span class="literal">true</span>,</div><div class="line">  saveScrollPosition: <span class="literal">true</span></div><div class="line">&#125;) <span class="comment">// 第二步</span></div><div class="line">router.map(&#123;</div><div class="line">    <span class="string">'/'</span>: &#123;</div><div class="line">      name: <span class="string">'index'</span>,</div><div class="line">      title: <span class="string">'全部'</span>,</div><div class="line">      component: (resolve) =&gt; <span class="built_in">require</span>([<span class="string">'./components/main/index.vue'</span>], resolve)</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'/good'</span>: &#123;</div><div class="line">      name: <span class="string">'good'</span>,</div><div class="line">      title: <span class="string">'精华'</span>,</div><div class="line">      component: (resolve) =&gt; <span class="built_in">require</span>([<span class="string">'./components/main/index.vue'</span>], resolve)</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">router.start(App, <span class="string">'#app'</span>)</div></pre></td></tr></table></figure></p>
<p>这里大家可以去看看源码，源码很简洁。主要就是声明了一个Router的对象，Router上面插件要的install方法，然后还有start方法。</p>
<p>源码片段<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span> (&#123;</div><div class="line">    hashbang = <span class="literal">true</span>,</div><div class="line">    abstract = <span class="literal">false</span>,</div><div class="line">    history = <span class="literal">false</span>,</div><div class="line">    saveScrollPosition = <span class="literal">false</span>,</div><div class="line">    transitionOnLoad = <span class="literal">false</span>,</div><div class="line">    suppressTransitionError = <span class="literal">false</span>,</div><div class="line">    root = <span class="literal">null</span>,</div><div class="line">    linkActiveClass = <span class="string">'v-link-active'</span></div><div class="line">  &#125; = &#123;&#125;) &#123;</div><div class="line">    ....</div><div class="line">  &#125;</div><div class="line">Router.install = <span class="function"><span class="keyword">function</span> (<span class="params">externalVue</span>) </span>&#123;</div><div class="line">  ....</div><div class="line">  Vue = externalVue</div><div class="line">  applyOverride(Vue)</div><div class="line">  View(Vue)</div><div class="line">  Link(Vue)</div><div class="line">  util.Vue = Vue</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>源码中在Router一共有9个方法：</p>
<ul>
<li>map</li>
<li>on</li>
<li>redirect</li>
<li>alias</li>
<li>beforeEach</li>
<li>afterEach</li>
<li>go</li>
<li>replace</li>
<li>start</li>
<li>stop</li>
</ul>
<p>其中start是初始化组件的，</p>
<p>其中涉及路由前期配置的是：map, redirect，alias，beforeEach，afterEach，start。go和replace两个方法都是路由跳转的。</p>
<p>map，redirect，alias这3个方法是基础的配置方法，很简单，就请看<a href="http://router.vuejs.org/zh-cn/index.html" target="_blank" rel="external">文档</a>吧。</p>
<p>这里主要讲下beforeEach和afterEach，就和方法名一样他们分别是在路由跳转前后做的一些事情。</p>
<p>在vue-router有一个路由声明周期的概念，这里不展开来讲，你只需要知道我们berforeEach和afterEach后面接的函数是一个钩子函数，钩子函数接受的第一个参数是一个transition对象,transition对象有以下方法，主要是用来控制路由跳转的。</p>
<ul>
<li>transition.to 一个我们将要跳转去的路由的对象，这个对象可能有path,name等属性。</li>
<li>transition.from 当前路由对象</li>
<li>transition.next() 调用此函数处理切换过程的下一步</li>
<li>transition.abort([reason]) 终止切换</li>
<li>transition.redirect(path) 重定向到另一个路由</li>
</ul>
<p>afterEach由于是路由切换后，只有上面的to,from两个属性。</p>
<p>为什么要单独讲beforEach和afterEach，因为我们可以在里面做很多全局的东西。比如登陆跳转、文章切换title、特定页面设置属性、调用vuex的方法等。这里我们讲一个刷新title的例子。后续还会有一个全局控制的文章，再补充些其他例子。</p>
<p>单页应用从始至终都只有会请求一个html，也就需要动态的改变，document title, 我们完全可以将修改title这个过程提到全局，在afterEach里面做，如下所示：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">router.map(&#123;</div><div class="line">    <span class="string">'/'</span>: &#123;</div><div class="line">      name: <span class="string">'index'</span>,</div><div class="line">      title: <span class="string">'全部'</span>,</div><div class="line">      component: (resolve) =&gt; <span class="built_in">require</span>([<span class="string">'./components/main/index.vue'</span>], resolve)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// document title change</span></div><div class="line">  router.afterEach((transition) =&gt; &#123;</div><div class="line">    <span class="built_in">document</span>.title = transition.to.title || <span class="string">'CNode.js'</span></div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<p>在ios下面上述方法还不行，因为ios上有一个bug，不会再修改document.title时更新浏览器上面的title。因为这里并不是真正刷新页面，所以ios下不会调用浏览器更新title的事件吧。</p>
<p>可以用一个iframe的hack<a href="https://gist.github.com/wszgxa/48eefb02650ea011ab28a116643890a9" target="_blank" rel="external">方法</a></p>
<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>vue-router 提供的指令就一个：<code>v-link</code>。</p>
<p>他的作用就是跳转路由。具体用法如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 字面量路径 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"'home'"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 效果同上 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"&#123; path: 'home' &#125;"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 具名路径 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"&#123; name: 'user', params: &#123; userId: 123 &#125;&#125;"</span>&gt;</span>User<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>详细的用法建议看<a href="http://router.vuejs.org/zh-cn/link.html" target="_blank" rel="external">文档</a></p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>vue在use vue-router之后就会添加一个$route的属性。里面有很多属性，主要的就是router下面的方法。<br>我们用的较多的是router.go,还有就是router.on。</p>
<p>这里还是建议看<a href="http://router.vuejs.org/zh-cn/api/go.html" target="_blank" rel="external">文档</a>，比我搬过来要详细的多。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文所涉及代码全在&lt;a href=&quot;https://github.com/wszgxa/vue-cnode&quot;&gt;vue-cnode&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;vue-router主要作用是将路由控制，转移到前端。我们将会在vue-router里面保存一个路由表，在vue中具体通过调用提供的指令或则方法进行跳转。&lt;/p&gt;
&lt;p&gt;其实吧，vue-router说白了就是一个插件，对外暴露的也就是指令和方法。如果只要求灵活用起来，我们需要学习的也就3个地方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置路由&lt;/li&gt;
&lt;li&gt;指令&lt;/li&gt;
&lt;li&gt;方法&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JS" scheme="http://hiluluke.cn/categories/JS/"/>
    
    
      <category term="vue" scheme="http://hiluluke.cn/tags/vue/"/>
    
      <category term="spa" scheme="http://hiluluke.cn/tags/spa/"/>
    
  </entry>
  
  <entry>
    <title>使用Vue快速开发单页应用</title>
    <link href="http://hiluluke.cn/2016/08/04/vue-spa/"/>
    <id>http://hiluluke.cn/2016/08/04/vue-spa/</id>
    <published>2016-08-03T16:00:00.000Z</published>
    <updated>2016-08-25T04:10:27.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文所涉及代码全在<a href="https://github.com/wszgxa/vue-cnode" target="_blank" rel="external">vue-cnode</a></p>
</blockquote>
<p>单页应用，即在一个页面集成系统中所有功能，整个应用只有一个页面。因为路由的控制在前端，单页面应用在页面切换时比传统页面更快，从而在前端体验更好。</p>
<p>将逻辑从后端转移到前端，提升了性能减少了页面加载时间，前后逻辑更扁平。但是当页面复杂度变高时，你会发现，数据处理，UI交互将变得难以维护，所以应运而生，出现了很多MV<em>框架和类库。Vue就是其中之一，个人觉得（非喜勿喷）Vue类库相对于其他MV</em>框架上整体的api更为简洁，提供的api很平衡，解决了问题的同时，没有增加复杂度。另外个人觉得vue在大型应用，开发中使用vue-loader将组件分成template,style,script结构更为清晰。</p>
<p>本文以及后面相应文章，主要是vue相关技术栈来快速的实现单页应用开发。系列文章将以一个实际项目进行讲解，项目的github地址为：</p>
<p><a href="https://github.com/wszgxa/vue-cnode" target="_blank" rel="external">vue-cnode demo</a></p>
<p>这是一个以<a href="cnodejs.org">cnodejs.org</a>提供的api来开发的单页，主要使用的modules有vue、vue-router、vuex、vue-resource。为了快速开发，我们还使用了vue-cli脚手架工具，下文会做介绍。<br><a id="more"></a></p>
<h2 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h2><p>自从node的兴起，前端项目中就开始出现各种预处理工具，当我们开始一个新项目时，我们都会先编写一些预处理文件，和构建项目目录。</p>
<p>而vue-cli就是为了做这方面工作的，生成一套提前定义好的构建文件，和相应的文件。</p>
<p>vue-cli有5个对应的项目结构。我们使用的是<a href="https://github.com/vuejs-templates/webpack" target="_blank" rel="external">vue-webpack-boilerplate</a>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ npm install -g vue-cli</div><div class="line">$ vue init webpack my-project</div><div class="line">$ cd my-project</div><div class="line">$ npm install</div><div class="line">$ npm run dev</div></pre></td></tr></table></figure>
<p>执行上面命令后，我们将生成下面的文件结构，并开一个服务，你可以打开<a href="http://localhost:8080看看。" target="_blank" rel="external">http://localhost:8080看看。</a></p>
<p><img src="http://7fvhwe.com1.z0.glb.clouddn.com/tree.png" alt="文件结构"></p>
<p>具体的使用建议看<a href="http://vuejs-templates.github.io/webpack/" target="_blank" rel="external">文档</a>。</p>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>如果你之前就了解vue和vue-router，可以先看这部分。如果你了解vue不了解vue-router,可以先看这篇文章<a href="http://hiluluke.cn/2016/08/05/vue-router/">vue-router</a>。如果你连vue都不是很理解我建议，抽5个小时左右把<a href="http://cn.vuejs.org/guide/" target="_blank" rel="external">文档教程</a>过一遍。</p>
<p>你可以看到项目根目录下面有一个html，仅有的一个html。</p>
<p><img src="http://7fvhwe.com1.z0.glb.clouddn.com/fileStruct.png" alt="项目结构"></p>
<p>上图的结构是我自己琢磨的，主要是结合vue-router、vuex两使用方法来考虑的。另外对于组件的复用，将一些功能组件和全局组件都放在根部，通过vuex来控制组件属性实现一些功能。</p>
<p>下面我就结构由上至下的介绍。</p>
<h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><p>main.js 是我们的入口文件，主要作用是初始化vue实例并使用需要的插件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></div><div class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></div><div class="line"><span class="keyword">import</span> VueResource <span class="keyword">from</span> <span class="string">'vue-resource'</span></div><div class="line"><span class="keyword">import</span> filter <span class="keyword">from</span> <span class="string">'./filter'</span></div><div class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./vuex/store'</span></div><div class="line"><span class="keyword">import</span> &#123; sync &#125; <span class="keyword">from</span> <span class="string">'vuex-router-sync'</span></div><div class="line"><span class="keyword">import</span> &#123; configRouter &#125; <span class="keyword">from</span> <span class="string">'./config_router'</span></div><div class="line"><span class="keyword">import</span> resourceGlobalSet <span class="keyword">from</span> <span class="string">'./resource_set'</span></div><div class="line"></div><div class="line">Vue.use(VueResource)</div><div class="line">Vue.use(VueRouter)</div><div class="line"><span class="comment">// 初始化自定义过滤器</span></div><div class="line">Vue.use(filter)</div><div class="line"></div><div class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">  history: <span class="literal">true</span>,</div><div class="line">  saveScrollPosition: <span class="literal">true</span></div><div class="line">&#125;)</div><div class="line">configRouter(router)</div><div class="line">Vue.http.options.emulateJSON = <span class="literal">true</span></div><div class="line">Vue.http.interceptors.push(resourceGlobalSet) <span class="comment">// ajax 拦截</span></div><div class="line"></div><div class="line">sync(store, router)</div><div class="line">router.start(App, <span class="string">'app'</span>)</div></pre></td></tr></table></figure></p>
<p>就如同上面所示，主要是使用和配置相应插件，并初始化一个vue，上面的初始化在<code>router.start(App, &#39;app&#39;)</code>，是以App.vue为组要组件，并以html中的<app></app>为挂载替换点。</p>
<h3 id="APP-vue"><a href="#APP-vue" class="headerlink" title="APP.vue"></a>APP.vue</h3><p>App.vue是我们的主组件，所有页面都是在App.vue下进行切换的。其实你也可以理解为所有的路由也是App.vue的子组件。所以我将router标示为App.vue的子组件。</p>
<p>下面是App.vue的template<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">cn-header</span>&gt;</span><span class="tag">&lt;/<span class="name">cn-header</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">sidebar</span>&gt;</span><span class="tag">&lt;/<span class="name">sidebar</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tip</span>&gt;</span><span class="tag">&lt;/<span class="name">tip</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">loading</span>&gt;</span><span class="tag">&lt;/<span class="name">loading</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>你可以看到route-view和其它全局功能组件，全局组件在一个层级。</p>
<p>另外由于APP.vue在所有页面都有，我们将会在APP.vue上面写一些初始化全局方法。</p>
<h3 id="router"><a href="#router" class="headerlink" title="router"></a>router</h3><p>router 是具体的业务组件，比如index,login,content等组件都是具体业务相关的。下面就是再和业务相关的组件。</p>
<h3 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h3><p>全局组件是页面共用的部分，比如header，footer，navbar，你可能在想如果我有一些header是独特的怎么办，这种情况下可以通过路由做判断，渲染不同的html，如果判断条件不是路由，也可以在vuex写一个store记录组件的state。</p>
<h3 id="功能组件"><a href="#功能组件" class="headerlink" title="功能组件"></a>功能组件</h3><p>功能组件是比如dialog,tip等组件，是用来与用户交互的。</p>
<p>通常情况下，功能组件是各个组件都需要的一些组件。在一个页面里如果有两个组件，两个组件都同时引了一个tip组件作为子组件是纯在的。为了避免这种情况，我们将功能组件提到App.vue然后通过vuex进行组件交互，从而就讲一个功能组件变成了全局方法。</p>
<h3 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a>自定义插件</h3><p>vue还能自己写插件。对于一些公用的方法和逻辑，我们可以提出来写在插件里面。</p>
<h2 id="小节"><a href="#小节" class="headerlink" title="小节"></a>小节</h2><p>可以看到，我们项目整体结构非常清晰。入口加载初始化，主组件挂载路由全局控制，然后全局组件功能组件借助vuex进行数据控制。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文所涉及代码全在&lt;a href=&quot;https://github.com/wszgxa/vue-cnode&quot;&gt;vue-cnode&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;单页应用，即在一个页面集成系统中所有功能，整个应用只有一个页面。因为路由的控制在前端，单页面应用在页面切换时比传统页面更快，从而在前端体验更好。&lt;/p&gt;
&lt;p&gt;将逻辑从后端转移到前端，提升了性能减少了页面加载时间，前后逻辑更扁平。但是当页面复杂度变高时，你会发现，数据处理，UI交互将变得难以维护，所以应运而生，出现了很多MV&lt;em&gt;框架和类库。Vue就是其中之一，个人觉得（非喜勿喷）Vue类库相对于其他MV&lt;/em&gt;框架上整体的api更为简洁，提供的api很平衡，解决了问题的同时，没有增加复杂度。另外个人觉得vue在大型应用，开发中使用vue-loader将组件分成template,style,script结构更为清晰。&lt;/p&gt;
&lt;p&gt;本文以及后面相应文章，主要是vue相关技术栈来快速的实现单页应用开发。系列文章将以一个实际项目进行讲解，项目的github地址为：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wszgxa/vue-cnode&quot;&gt;vue-cnode demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是一个以&lt;a href=&quot;cnodejs.org&quot;&gt;cnodejs.org&lt;/a&gt;提供的api来开发的单页，主要使用的modules有vue、vue-router、vuex、vue-resource。为了快速开发，我们还使用了vue-cli脚手架工具，下文会做介绍。&lt;br&gt;
    
    </summary>
    
      <category term="JS" scheme="http://hiluluke.cn/categories/JS/"/>
    
    
      <category term="vue" scheme="http://hiluluke.cn/tags/vue/"/>
    
      <category term="spa" scheme="http://hiluluke.cn/tags/spa/"/>
    
  </entry>
  
  <entry>
    <title>BFC note</title>
    <link href="http://hiluluke.cn/2016/05/05/BFC-note/"/>
    <id>http://hiluluke.cn/2016/05/05/BFC-note/</id>
    <published>2016-05-04T16:00:00.000Z</published>
    <updated>2016-05-05T14:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几天和别人交流的时候，让实现这么一个布局：</p>
<p><img src="http://7fvhwe.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-05-05%20%E4%B8%8B%E5%8D%882.53.39.png" alt="双栏图片布局"></p>
<p>大概就是上面这个样子。左边是一个图片，右边是文字区域。然后我给的大概实现方式是，左边图片高度宽度固定左浮动，然后右边div框起来左外边距等于图片宽度。</p>
<p>然后这个大兄弟马上说，图片高度宽度不知。我想了想，想起来了overflow:auto可以实现，就这样说了。大兄弟马上问我为啥，我懵逼了。</p>
<p>大兄弟一脸高深的告诉我：知道BFC不？(大兄弟人还是挺好的)</p>
<a id="more"></a>
<p>不知道可以不，于是就去了解下吧，写这篇笔记，记录下。</p>
<h2 id="是个啥"><a href="#是个啥" class="headerlink" title="是个啥"></a>是个啥</h2><p>我觉得这句话总结的不错：</p>
<blockquote>
<p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p>
</blockquote>
<p>当元素触发了BFC之后就完全与外部元素隔离了，容器里面的子元素就不会影响外部元素的布局，外部也影响不到内部元素的布局。比如一些margin重合，浮动元素等等的例子。</p>
<h2 id="怎么触发"><a href="#怎么触发" class="headerlink" title="怎么触发"></a>怎么触发</h2><ul>
<li>根元素</li>
<li><code>float</code>元素不为none的。</li>
<li><code>position</code>为<code>absolute</code>或则<code>fixed</code></li>
<li><code>display</code>为<code>inline-block, table-cell, table-caption, flex, inline-flex</code></li>
<li><code>overflow</code>不为visible</li>
</ul>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><h3 id="自适应两栏布局"><a href="#自适应两栏布局" class="headerlink" title="自适应两栏布局"></a>自适应两栏布局</h3><p>这里首先要提的一个是：</p>
<blockquote>
<p>每个元素的margin box的左边与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</p>
</blockquote>
<p>具体可以看下面的<code>.left</code>元素，即使它是浮动元素，它还是与外部元素的border相重合。</p>
<p>在一个就是：</p>
<blockquote>
<p>BFC的区域不会与float box重叠。</p>
</blockquote>
<p>大兄弟问的就是上面这条，早晓得了就不会懵逼了。你可以去codepen注释下面的<code>overflow: hidden</code>看看效果。</p>
<p></p><p data-height="300" data-theme-id="17379" data-slug-hash="mPapdp" data-default-tab="css,result" data-user="hiluluke" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/hiluluke/pen/mPapdp/" target="_blank" rel="external">mPapdp</a> by hiluluke (<a href="http://codepen.io/hiluluke" target="_blank" rel="external">@hiluluke</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<h3 id="清除内部浮动"><a href="#清除内部浮动" class="headerlink" title="清除内部浮动"></a>清除内部浮动</h3><p>可能你早就知道在父元素设置<code>overflow:hidden</code>可以清除浮动，但可能不知道是因为BFC。</p>
<p>BFC有下面一条规则：</p>
<blockquote>
<p>计算BFC的高度时，浮动元素也参与计算</p>
</blockquote>
<p>所以当父元素一旦触发了BFC之后其高度就会计算浮动元素的高度。</p>
<p></p><p data-height="300" data-theme-id="17379" data-slug-hash="EKGogy" data-default-tab="css,result" data-user="hiluluke" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/hiluluke/pen/EKGogy/" target="_blank" rel="external">EKGogy</a> by hiluluke (<a href="http://codepen.io/hiluluke" target="_blank" rel="external">@hiluluke</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>你可以注释上面outer里面的<code>overflow: hidden</code>看看。</p>
<h3 id="防止margin重叠"><a href="#防止margin重叠" class="headerlink" title="防止margin重叠"></a>防止margin重叠</h3><p>我们知道在一般的w3c box里面如果有margin靠在一起是会发生margin重叠的。而BFC有这么一条规矩：</p>
<blockquote>
<p>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</p>
</blockquote>
<p>也就是说，不是同一个BFC就不会发生重叠了。</p>
<p></p><p data-height="300" data-theme-id="17379" data-slug-hash="YqdYNY" data-default-tab="css,result" data-user="hiluluke" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/hiluluke/pen/YqdYNY/" target="_blank" rel="external">YqdYNY</a> by hiluluke (<a href="http://codepen.io/hiluluke" target="_blank" rel="external">@hiluluke</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>可以注释上面的<code>overflow: hidden</code>看看。</p>
<p>还有很多有趣的BFC应用，大家可以搜索下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天和别人交流的时候，让实现这么一个布局：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7fvhwe.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-05-05%20%E4%B8%8B%E5%8D%882.53.39.png&quot; alt=&quot;双栏图片布局&quot;&gt;&lt;/p&gt;
&lt;p&gt;大概就是上面这个样子。左边是一个图片，右边是文字区域。然后我给的大概实现方式是，左边图片高度宽度固定左浮动，然后右边div框起来左外边距等于图片宽度。&lt;/p&gt;
&lt;p&gt;然后这个大兄弟马上说，图片高度宽度不知。我想了想，想起来了overflow:auto可以实现，就这样说了。大兄弟马上问我为啥，我懵逼了。&lt;/p&gt;
&lt;p&gt;大兄弟一脸高深的告诉我：知道BFC不？(大兄弟人还是挺好的)&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://hiluluke.cn/categories/CSS/"/>
    
    
      <category term="css" scheme="http://hiluluke.cn/tags/css/"/>
    
      <category term="布局" scheme="http://hiluluke.cn/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>zepto源码学习</title>
    <link href="http://hiluluke.cn/2016/04/11/zepto_learn_function/"/>
    <id>http://hiluluke.cn/2016/04/11/zepto_learn_function/</id>
    <published>2016-04-10T16:00:00.000Z</published>
    <updated>2016-08-11T13:28:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="extend"><a href="#extend" class="headerlink" title="$.extend"></a>$.extend</h2><ul>
<li><p>用途<br>扩展对象属性。<br>第一个参数如果是true就递归的将source给target。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$.extend(target, [source, [source2, ...]])  ⇒ target</div><div class="line">$.extend(<span class="literal">true</span>, target, [source, ...])  ⇒ target v1<span class="number">.0</span>+</div></pre></td></tr></table></figure>
</li>
<li><p>相关代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">target, source, deep</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> source)</div><div class="line">    <span class="keyword">if</span> (deep &amp;&amp; (isPlainObject(source[key]) || isArray(source[key]))) &#123;</div><div class="line">      <span class="keyword">if</span> (isPlainObject(source[key]) &amp;&amp; !isPlainObject(target[key]))</div><div class="line">        target[key] = &#123;&#125;</div><div class="line">      <span class="keyword">if</span> (isArray(source[key]) &amp;&amp; !isArray(target[key]))</div><div class="line">        target[key] = []</div><div class="line">      extend(target[key], source[key], deep)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (source[key] !== <span class="literal">undefined</span>) target[key] = source[key]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Copy all but undefined properties from one or more</span></div><div class="line"><span class="comment">// objects to the `target` object.</span></div><div class="line">$.extend = <span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> deep, args = slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> target == <span class="string">'boolean'</span>) &#123;</div><div class="line">    deep = target</div><div class="line">    target = args.shift()</div><div class="line">  &#125;</div><div class="line">  args.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">arg</span>)</span>&#123; extend(target, arg, deep) &#125;)</div><div class="line">  <span class="keyword">return</span> target</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h2 id="zepto-qsa"><a href="#zepto-qsa" class="headerlink" title="zepto.qsa"></a>zepto.qsa</h2><ul>
<li><p>用途<br>Css 选择器，主要是用<code>document.querySelectAll</code>，另外正对一些特殊的css选择做了优化比如”#id”。<br>他是一个内部方法，但是通过$.zepto暴露了出来，可以在插件中改写他。</p>
</li>
<li><p>代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">zepto.qsa = <span class="function"><span class="keyword">function</span>(<span class="params">element, selector</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> found,</div><div class="line">      maybeID = selector[<span class="number">0</span>] == <span class="string">'#'</span>,</div><div class="line">      maybeClass = !maybeID &amp;&amp; selector[<span class="number">0</span>] == <span class="string">'.'</span>,</div><div class="line">      nameOnly = maybeID || maybeClass ? selector.slice(<span class="number">1</span>) : selector, <span class="comment">// Ensure that a 1 char tag name still gets checked</span></div><div class="line">      isSimple = simpleSelectorRE.test(nameOnly)</div><div class="line">  <span class="keyword">return</span> (element.getElementById &amp;&amp; isSimple &amp;&amp; maybeID) ? <span class="comment">// Safari DocumentFragment doesn't have getElementById</span></div><div class="line">    ( (found = element.getElementById(nameOnly)) ? [found] : [] ) :</div><div class="line">    (element.nodeType !== <span class="number">1</span> &amp;&amp; element.nodeType !== <span class="number">9</span> &amp;&amp; element.nodeType !== <span class="number">11</span>) ? [] :</div><div class="line">    slice.call(</div><div class="line">      isSimple &amp;&amp; !maybeID &amp;&amp; element.getElementsByClassName ? <span class="comment">// DocumentFragment doesn't have getElementsByClassName/TagName</span></div><div class="line">        maybeClass ? element.getElementsByClassName(nameOnly) : <span class="comment">// If it's simple, it could be a class</span></div><div class="line">        element.getElementsByTagName(selector) : <span class="comment">// Or a tag</span></div><div class="line">        element.querySelectorAll(selector) <span class="comment">// Or it's not simple, and we need to query all</span></div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面有判断是不是含有id选择器，并用不同的选择方式，这样做主要是提高性能。上面的<code>simpleSelectorRE = /^[\w-]*$/</code>,用来看是否是在没有子css选择器的简单选择器。return里面有多层判断用来，选择最好的选择器。</p>
</li>
</ul>
<h2 id="fn-concat（带fn的都是绑定在fn上的）"><a href="#fn-concat（带fn的都是绑定在fn上的）" class="headerlink" title="$.fn.concat（带fn的都是绑定在fn上的）"></a>$.fn.concat（带fn的都是绑定在fn上的）</h2><ul>
<li><p>用途<br>这个方法只有zepto有，jq没有。把把后面的参数加在第一个参数数组里面。数组和类数组一样的都会一样的操作。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">concat(nodes, [node2, ...])  ⇒ self</div></pre></td></tr></table></figure>
</li>
<li><p>代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">concat: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> i, value, args = []</div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</div><div class="line">    value = <span class="built_in">arguments</span>[i]</div><div class="line">    args[i] = zepto.isZ(value) ? value.toArray() : value</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> concat.apply(zepto.isZ(<span class="keyword">this</span>) ? <span class="keyword">this</span>.toArray() : <span class="keyword">this</span>, args)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面有判断调用对象是不是zepto对象，是的话就把他的dom元素取出来放数组里面。其中concat.apply中的concat是<code>concat = emptyArray.concat</code>空数组的原生方法。</p>
</li>
</ul>
<h2 id="map"><a href="#map" class="headerlink" title="$.map"></a>$.map</h2><ul>
<li><p>用途<br>循环遍历传入元素，回调函数判断一波，然后返回正确的数组。<br>*代码  </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$.map = <span class="function"><span class="keyword">function</span>(<span class="params">elements, callback</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> value, values = [], i, key</div><div class="line">  <span class="keyword">if</span> (likeArray(elements))</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</div><div class="line">      value = callback(elements[i], i)</div><div class="line">      <span class="keyword">if</span> (value != <span class="literal">null</span>) values.push(value)</div><div class="line">    &#125;</div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> elements) &#123;</div><div class="line">      value = callback(elements[key], key)</div><div class="line">      <span class="keyword">if</span> (value != <span class="literal">null</span>) values.push(value)</div><div class="line">    &#125;</div><div class="line">  <span class="keyword">return</span> flatten(values)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中有个flatten,他是一个私有方法，主要作用就是将数组中的zepto对象元素的dom元素取出来放数组里面。</p>
</li>
</ul>
<h2 id="each-fn-each-在fn和-上都有这个方法，用法不一样"><a href="#each-fn-each-在fn和-上都有这个方法，用法不一样" class="headerlink" title="$.each $.fn.each (在fn和$上都有这个方法，用法不一样)"></a>$.each $.fn.each (在fn和$上都有这个方法，用法不一样)</h2><ul>
<li><p>用途<br>遍历元素，这里可以遍历一个数组或者就是zepto对象，当回调函数返回<code>false</code>的时候停止遍历。<br>两种用法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'form input'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'input %d is: %o'</span>, index, <span class="keyword">this</span>);</div><div class="line">&#125;)</div><div class="line">$.each([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'input %d is: %o'</span>, index, <span class="keyword">this</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$.each = <span class="function"><span class="keyword">function</span>(<span class="params">elements, callback</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> i, key</div><div class="line">  <span class="keyword">if</span> (likeArray(elements)) &#123;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; elements.length; i++)</div><div class="line">      <span class="keyword">if</span> (callback.call(elements[i], i, elements[i]) === <span class="literal">false</span>) <span class="keyword">return</span> elements</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> elements)</div><div class="line">      <span class="keyword">if</span> (callback.call(elements[key], key, elements[key]) === <span class="literal">false</span>) <span class="keyword">return</span> elements</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> elements</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面这个是定义在fn上面的</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">each: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">    emptyArray.every.call(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el, idx</span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> callback.call(el, idx, el) !== <span class="literal">false</span></div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>当是一个类数组调用时用$上的方法，当是zepto对象调用的时候用fn上的方法。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;extend&quot;&gt;&lt;a href=&quot;#extend&quot; class=&quot;headerlink&quot; title=&quot;$.extend&quot;&gt;&lt;/a&gt;$.extend&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;用途&lt;br&gt;扩展对象属性。&lt;br&gt;第一个参数如果是true就递归的将source给target。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$.extend(target, [source, [source2, ...]])  ⇒ target&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$.extend(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, target, [source, ...])  ⇒ target v1&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;+&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;相关代码&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extend&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;target, source, deep&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; source)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (deep &amp;amp;&amp;amp; (isPlainObject(source[key]) || isArray(source[key]))) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isPlainObject(source[key]) &amp;amp;&amp;amp; !isPlainObject(target[key]))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        target[key] = &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isArray(source[key]) &amp;amp;&amp;amp; !isArray(target[key]))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        target[key] = []&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      extend(target[key], source[key], deep)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (source[key] !== &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;) target[key] = source[key]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Copy all but undefined properties from one or more&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// objects to the `target` object.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$.extend = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;target&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; deep, args = slice.call(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; target == &lt;span class=&quot;string&quot;&gt;&#39;boolean&#39;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    deep = target&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    target = args.shift()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  args.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arg&lt;/span&gt;)&lt;/span&gt;&amp;#123; extend(target, arg, deep) &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; target&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JS" scheme="http://hiluluke.cn/categories/JS/"/>
    
    
      <category term="javascript" scheme="http://hiluluke.cn/tags/javascript/"/>
    
      <category term="前端" scheme="http://hiluluke.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>zepto源码学习</title>
    <link href="http://hiluluke.cn/2016/04/09/zepto_learn_chain/"/>
    <id>http://hiluluke.cn/2016/04/09/zepto_learn_chain/</id>
    <published>2016-04-08T16:00:00.000Z</published>
    <updated>2016-08-11T13:28:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>今年重新找工作的时候面试官问了个问题，jQuery的链式函数调用的原理。当时一脸懵逼，因为完全没有去了解过。（事实证明面试能够很好的提高自己）</p>
<p>然后感觉直接去看jq的源码，要仔细看好感觉得花很长时间，还是先看看zepto,反正组织代码的原理都差不多。</p>
<h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><p>在立即调用函数中声明了3个东东：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">zepto = &#123;&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Z</span>(<span class="params">dom, selector</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> i, len = dom ? dom.length : <span class="number">0</span></div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) <span class="keyword">this</span>[i] = dom[i]</div><div class="line">  <span class="keyword">this</span>.length = len</div><div class="line">  <span class="keyword">this</span>.selector = selector || <span class="string">''</span></div><div class="line">&#125;</div><div class="line">$ = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> zepto.init(selector, context)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当然声明的位置各有不同，Z函数很显然是构造函数，zepto是构造中间的一些方法的保留吧，然后$上挂上所有对外的方法。构造调用的基本流程是，$调用zepto的init，然后init函数做一些处理，再返回一个Z的｀return zepto.Z(dom, selector)｀,其中zepto.Z返回的就是一个构造函数Z。这样做的处理是要在$上吧zepto挂上，可以在插件里面改写。<br><a id="more"></a></p>
<h2 id=""><a href="#" class="headerlink" title="$"></a>$</h2><p>高级函数比如<code>each，extend</code>等不是对dom元素做操作的都直接<code>$.xxx</code>形式组织，而要对dom操作的都是放在<code>$.fn</code>当中。</p>
<p>而我们开题说的jq链式操作看看$.fn中随便一个函数就明白了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">each: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">      emptyArray.every.call(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el, idx</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> callback.call(el, idx, el) !== <span class="literal">false</span></div><div class="line">      &#125;)</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">    &#125;,</div></pre></td></tr></table></figure></p>
<p>每个函数如果可以链式操作的都会返回this，就是因为返回this所以可以继续对其进行操作。（我当时答了个原型链－－）</p>
<h2 id="插件原理"><a href="#插件原理" class="headerlink" title="插件原理"></a>插件原理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">zepto.Z.prototype = Z.prototype = $.fn</div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"></div><div class="line">上面的代码把$.fn加到另外两者的原型上。而我们的$构造函数就是返回的Z。所以，可以在$()上调用挂在fn上的方法。</div><div class="line"></div><div class="line">举个例子：</div><div class="line">zepto中有个each，他的定义有两处：</div><div class="line">`<span class="string">``</span> js</div><div class="line">$.each = <span class="function"><span class="keyword">function</span>(<span class="params">elements, callback</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> i, key</div><div class="line">  <span class="keyword">if</span> (likeArray(elements)) &#123;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; elements.length; i++)</div><div class="line">      <span class="keyword">if</span> (callback.call(elements[i], i, elements[i]) === <span class="literal">false</span>) <span class="keyword">return</span> elements</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> elements)</div><div class="line">      <span class="keyword">if</span> (callback.call(elements[key], key, elements[key]) === <span class="literal">false</span>) <span class="keyword">return</span> elements</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> elements</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面这个是定义在fn上面的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">each: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">    emptyArray.every.call(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el, idx</span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> callback.call(el, idx, el) !== <span class="literal">false</span></div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>意思大概就是：<br>$.each 不等于 $().each</p>
<p>其中$()是返回一个Z而$.each就是$.each</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年重新找工作的时候面试官问了个问题，jQuery的链式函数调用的原理。当时一脸懵逼，因为完全没有去了解过。（事实证明面试能够很好的提高自己）&lt;/p&gt;
&lt;p&gt;然后感觉直接去看jq的源码，要仔细看好感觉得花很长时间，还是先看看zepto,反正组织代码的原理都差不多。&lt;/p&gt;
&lt;h2 id=&quot;构造&quot;&gt;&lt;a href=&quot;#构造&quot; class=&quot;headerlink&quot; title=&quot;构造&quot;&gt;&lt;/a&gt;构造&lt;/h2&gt;&lt;p&gt;在立即调用函数中声明了3个东东：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;zepto = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Z&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;dom, selector&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i, len = dom ? dom.length : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; i++) &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[i] = dom[i]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length = len&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.selector = selector || &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;selector, context&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; zepto.init(selector, context)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然声明的位置各有不同，Z函数很显然是构造函数，zepto是构造中间的一些方法的保留吧，然后$上挂上所有对外的方法。构造调用的基本流程是，$调用zepto的init，然后init函数做一些处理，再返回一个Z的｀return zepto.Z(dom, selector)｀,其中zepto.Z返回的就是一个构造函数Z。这样做的处理是要在$上吧zepto挂上，可以在插件里面改写。&lt;br&gt;
    
    </summary>
    
      <category term="JS" scheme="http://hiluluke.cn/categories/JS/"/>
    
    
      <category term="javascript" scheme="http://hiluluke.cn/tags/javascript/"/>
    
      <category term="前端" scheme="http://hiluluke.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>toString方法的仔细了解</title>
    <link href="http://hiluluke.cn/2016/04/08/toString/"/>
    <id>http://hiluluke.cn/2016/04/08/toString/</id>
    <published>2016-04-07T16:00:00.000Z</published>
    <updated>2016-08-09T09:33:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="因子"><a href="#因子" class="headerlink" title="因子"></a>因子</h2><p>在看Zepto源码的时候发现它做类型判断的时候用的下面的方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;&#125;,</div><div class="line">    toString = a.toString;</div><div class="line"></div><div class="line">toString.call(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;); <span class="comment">// [object Function]</span></div><div class="line">toString.call(&#123;&#125;); <span class="comment">// [object Object]</span></div><div class="line">toString.call(<span class="number">123</span>); <span class="comment">// [object Number]</span></div><div class="line">toString.call(<span class="string">"sasa"</span>); <span class="comment">// [object String]</span></div></pre></td></tr></table></figure></p>
<p>上面这个判断类型的方法好像在js高程中好像看见过，不过忘了。然后让我对toString这个方法产生了好奇心，于是去多了解了下。<br><a id="more"></a></p>
<h2 id="所有类型调用toString-的返回值"><a href="#所有类型调用toString-的返回值" class="headerlink" title="所有类型调用toString()的返回值"></a>所有类型调用toString()的返回值</h2><table>
<thead>
<tr>
<th>类型</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td>对象</td>
<td>[object Obejct]  后面那个只为具体的对象</td>
</tr>
<tr>
<td>数组</td>
<td>逗号间隔的字符串</td>
</tr>
<tr>
<td>字符串</td>
<td>返回原字符串</td>
</tr>
<tr>
<td>函数</td>
<td>返回函数字符串</td>
</tr>
<tr>
<td>数字</td>
<td>数字字符串</td>
</tr>
<tr>
<td>正则</td>
<td>返回</td>
</tr>
<tr>
<td>Math 对象</td>
<td>[object Obejct]</td>
</tr>
<tr>
<td>Date</td>
<td>完整的时间字符串</td>
</tr>
<tr>
<td>boolen</td>
<td>字符串的原值</td>
</tr>
</tbody>
</table>
<h2 id="call改变引用对象后是咋样？"><a href="#call改变引用对象后是咋样？" class="headerlink" title="call改变引用对象后是咋样？"></a>call改变引用对象后是咋样？</h2><p>那对于其他的toString在通过call和apply改变this之后会是怎样呢？<br>我发现有些类型是这样的:</p>
<p><img src="http://7fvhwe.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-04-08%20%E4%B8%8B%E5%8D%885.48.19.png" alt=""></p>
<p>而有些类型像对象的一样返回[object xxxxx]</p>
<p>我试了试是不是引用类型和基本类型的区分。。。发现不是。不区分完了。还有其他事。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;因子&quot;&gt;&lt;a href=&quot;#因子&quot; class=&quot;headerlink&quot; title=&quot;因子&quot;&gt;&lt;/a&gt;因子&lt;/h2&gt;&lt;p&gt;在看Zepto源码的时候发现它做类型判断的时候用的下面的方法：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &amp;#123;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    toString = a.toString;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;toString.call(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;); &lt;span class=&quot;comment&quot;&gt;// [object Function]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;toString.call(&amp;#123;&amp;#125;); &lt;span class=&quot;comment&quot;&gt;// [object Object]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;toString.call(&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// [object Number]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;toString.call(&lt;span class=&quot;string&quot;&gt;&quot;sasa&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// [object String]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面这个判断类型的方法好像在js高程中好像看见过，不过忘了。然后让我对toString这个方法产生了好奇心，于是去多了解了下。&lt;br&gt;
    
    </summary>
    
      <category term="JS" scheme="http://hiluluke.cn/categories/JS/"/>
    
    
      <category term="javascript" scheme="http://hiluluke.cn/tags/javascript/"/>
    
      <category term="前端" scheme="http://hiluluke.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>zepto源码学习</title>
    <link href="http://hiluluke.cn/2016/04/07/zepto_learn/"/>
    <id>http://hiluluke.cn/2016/04/07/zepto_learn/</id>
    <published>2016-04-06T16:00:00.000Z</published>
    <updated>2016-08-11T13:29:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Zepto里面有一些没有暴露出来的私有方法，有一些值得借鉴的地方，比如里面用来判断类型的type函数。大概纪录如下：</p>
<h3 id="一些类型判断方法"><a href="#一些类型判断方法" class="headerlink" title="一些类型判断方法"></a>一些类型判断方法</h3><p>判断数组：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">isArray = <span class="built_in">Array</span>.isArray ||</div><div class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">object</span>)</span>&#123; <span class="keyword">return</span> object <span class="keyword">instanceof</span> <span class="built_in">Array</span> &#125;</div></pre></td></tr></table></figure></p>
<p><em>类型判断函数</em><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> class2type = &#123;&#125;,</div><div class="line">    toString = class2type.toString;</div><div class="line"><span class="comment">// class2type map</span></div><div class="line">$.each(<span class="string">"Boolean Number String Function Array Date RegExp Object Error"</span>.split(<span class="string">" "</span>), <span class="function"><span class="keyword">function</span>(<span class="params">i, name</span>) </span>&#123;</div><div class="line">  class2type[ <span class="string">"[object "</span> + name + <span class="string">"]"</span> ] = name.toLowerCase()</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> obj == <span class="literal">null</span> ? <span class="built_in">String</span>(obj) :</div><div class="line">      class2type[toString.call(obj)] || <span class="string">"object"</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>上面的类型判断，基本上可以判断所有的类型。主要是改变toString的this指向来实现的。</p>
<a id="more"></a>
<p>是否是函数，对象(用了上面的type方法)：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">value</span>) </span>&#123; <span class="keyword">return</span> type(value) == <span class="string">"function"</span> &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">obj</span>)     </span>&#123; <span class="keyword">return</span> type(obj) == <span class="string">"object"</span> &#125;</div></pre></td></tr></table></figure></p>
<p>判断Window,Document节点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isWindow</span>(<span class="params">obj</span>)     </span>&#123; <span class="keyword">return</span> obj != <span class="literal">null</span> &amp;&amp; obj == obj.window &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDocument</span>(<span class="params">obj</span>)   </span>&#123; <span class="keyword">return</span> obj != <span class="literal">null</span> &amp;&amp; obj.nodeType == obj.DOCUMENT_NODE &#125;</div></pre></td></tr></table></figure></p>
<p>判断是否是 plainObject(就是通过｛｝和new Object声明出来的空对象吧)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPlainObject</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> isObject(obj) &amp;&amp; !isWindow(obj) &amp;&amp; <span class="built_in">Object</span>.getPrototypeOf(obj) == <span class="built_in">Object</span>.prototype</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>判断是是不是<code>类数组</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">likeArray</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">typeof</span> obj.length == <span class="string">'number'</span> &#125;</div></pre></td></tr></table></figure></p>
<h3 id="数组方法及利用"><a href="#数组方法及利用" class="headerlink" title="数组方法及利用"></a>数组方法及利用</h3><p>提取了3个数组的方法<code>concat</code>,<code>filter</code>,<code>slice</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> emptyArray = [], concat = emptyArray.concat, filter = emptyArray.filter, slice = emptyArray.slice;</div></pre></td></tr></table></figure>
<p>用filter来过滤数组中的空项：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compact</span>(<span class="params">array</span>) </span>&#123; <span class="keyword">return</span> filter.call(array, <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> item != <span class="literal">null</span> &#125;) &#125;</div></pre></td></tr></table></figure>
<p>删除数组中重复的元素 *</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uniq = <span class="function"><span class="keyword">function</span>(<span class="params">array</span>)</span>&#123; <span class="keyword">return</span> filter.call(array, <span class="function"><span class="keyword">function</span>(<span class="params">item, idx</span>)</span>&#123; <span class="keyword">return</span> array.indexOf(item) == idx &#125;) &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Zepto里面有一些没有暴露出来的私有方法，有一些值得借鉴的地方，比如里面用来判断类型的type函数。大概纪录如下：&lt;/p&gt;
&lt;h3 id=&quot;一些类型判断方法&quot;&gt;&lt;a href=&quot;#一些类型判断方法&quot; class=&quot;headerlink&quot; title=&quot;一些类型判断方法&quot;&gt;&lt;/a&gt;一些类型判断方法&lt;/h3&gt;&lt;p&gt;判断数组：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;isArray = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.isArray ||&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;object&lt;/span&gt;)&lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; object &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;类型判断函数&lt;/em&gt;&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; class2type = &amp;#123;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    toString = class2type.toString;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// class2type map&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$.each(&lt;span class=&quot;string&quot;&gt;&quot;Boolean Number String Function Array Date RegExp Object Error&quot;&lt;/span&gt;.split(&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;), &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;i, name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  class2type[ &lt;span class=&quot;string&quot;&gt;&quot;[object &quot;&lt;/span&gt; + name + &lt;span class=&quot;string&quot;&gt;&quot;]&quot;&lt;/span&gt; ] = name.toLowerCase()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;type&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; obj == &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;(obj) :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      class2type[toString.call(obj)] || &lt;span class=&quot;string&quot;&gt;&quot;object&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的类型判断，基本上可以判断所有的类型。主要是改变toString的this指向来实现的。&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://hiluluke.cn/categories/JS/"/>
    
    
      <category term="javascript" scheme="http://hiluluke.cn/tags/javascript/"/>
    
      <category term="前端" scheme="http://hiluluke.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>记一次首屏优化</title>
    <link href="http://hiluluke.cn/2016/01/16/first-screen/"/>
    <id>http://hiluluke.cn/2016/01/16/first-screen/</id>
    <published>2016-01-15T16:00:00.000Z</published>
    <updated>2016-02-08T11:54:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>在之前一段时间看了个首屏优化细节的文章，然后在自己项目里实际操作了下。</p>
<p>现在的业务逻辑涉及移动端支付，所以第一个需要考虑的就是首屏时间，如果首屏时间过长，用户体检是十分差的。其实就做了很简单一件事，在移动端将涉及页面渲染的样式表写成了内联样式。</p>
<p>大家都知道，请求了html之后才回根据html里面的链接去请求相应的样式，图片，视屏种种。而首屏时间就是将涉及页面渲染的种种全部加载完毕，浏览器render完毕之后的时间。这里也就能够理解要将样式表写在head里面，而把js写在<code>&lt;/body&gt;</code>之前的原因了。因为css涉及页面渲染，而js大多是业务逻辑，大多数不涉及页面渲染，所以完全可以把js的解析放在页面渲染之后。当然，你也注意到，大多数js不涉及页面渲染，而少数js也涉及页面渲染的，这时候可以把js放在<code>&lt;body&gt;</code>后面，另外这里也要注意，dom节点可能还没有生成，所以操作上一般是在<code>&lt;body&gt;</code>上加class，然后配合css的子父选择器。</p>
<a id="more"></a>
<p>回到本文，我们需要见降低首屏时间。我在chrome调试工具下发现，再加载html之后再去请求css带来的时间上的延迟是很大的。所以尝试了下，将css压缩之后内联在html里面。结果如下：</p>
<p>之前的加载时间：</p>
<p><img src="http://7fvhwe.com1.z0.glb.clouddn.com/%E9%80%89%E5%8C%BA_038.png" alt="之前的加载时间"></p>
<p>写成内联后的加载时间：</p>
<p><img src="http://7fvhwe.com1.z0.glb.clouddn.com/%E9%80%89%E5%8C%BA_037.png" alt="之后的加载时间"></p>
<p>上面的网络状态都是在3g网络状态下。</p>
<p>多次测试下，时间节约约一半。</p>
<p>这样做的坏处：</p>
<ul>
<li>不易维护，可以想象在html里面放一段压缩过后的css代码，是件多么恶心的事。不过在移动端感觉影响不大，样式表不会太大。</li>
<li>将css内联到html中的繁重操作，如果能自动化久好了。</li>
</ul>
<p>针对上面的问题，只要有一个工具能将样式表主动替换就好了，我去npm找了下。只找到一个将gulp插件将样式写成行内的，这完全是个不可逆的过程了。所以最后也没有使用。</p>
<p>所以现在尝试去自己写写gulp插件，看能不能满足自己需求。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在之前一段时间看了个首屏优化细节的文章，然后在自己项目里实际操作了下。&lt;/p&gt;
&lt;p&gt;现在的业务逻辑涉及移动端支付，所以第一个需要考虑的就是首屏时间，如果首屏时间过长，用户体检是十分差的。其实就做了很简单一件事，在移动端将涉及页面渲染的样式表写成了内联样式。&lt;/p&gt;
&lt;p&gt;大家都知道，请求了html之后才回根据html里面的链接去请求相应的样式，图片，视屏种种。而首屏时间就是将涉及页面渲染的种种全部加载完毕，浏览器render完毕之后的时间。这里也就能够理解要将样式表写在head里面，而把js写在&lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;之前的原因了。因为css涉及页面渲染，而js大多是业务逻辑，大多数不涉及页面渲染，所以完全可以把js的解析放在页面渲染之后。当然，你也注意到，大多数js不涉及页面渲染，而少数js也涉及页面渲染的，这时候可以把js放在&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;后面，另外这里也要注意，dom节点可能还没有生成，所以操作上一般是在&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;上加class，然后配合css的子父选择器。&lt;/p&gt;
    
    </summary>
    
      <category term="性能" scheme="http://hiluluke.cn/categories/%E6%80%A7%E8%83%BD/"/>
    
    
      <category term="性能" scheme="http://hiluluke.cn/tags/%E6%80%A7%E8%83%BD/"/>
    
      <category term="翻译" scheme="http://hiluluke.cn/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>12个鲜为人知的css现象（续集）</title>
    <link href="http://hiluluke.cn/2016/01/10/css-facts/"/>
    <id>http://hiluluke.cn/2016/01/10/css-facts/</id>
    <published>2016-01-09T16:00:00.000Z</published>
    <updated>2016-01-11T10:24:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文翻译自 <a href="http://www.sitepoint.com/12-little-known-css-facts-the-sequel/?utm_source=html5weekly&amp;utm_medium=email" target="_blank" rel="external">12 little known css facts(the-sequel)</a><br>原作者是<a href="http://scncf-lab.com/" target="_blank" rel="external">Natalia Balska</a></p>
</blockquote>
<p>原作者在一年前也发表过一篇<a href="http://www.sitepoint.com/12-little-known-css-facts/" target="_blank" rel="external">12个鲜为人知的css现象</a>，然后这篇文章现在也还很受欢迎，有时间的同学可以看看。原作者又收集了更多的鲜为人知的css性质，也就是这篇文章的来源。</p>
<h3 id="1、border-radius-有“／”的语法"><a href="#1、border-radius-有“／”的语法" class="headerlink" title="1、border-radius 有“／”的语法"></a>1、<code>border-radius</code> 有“／”的语法</h3><p>首先，下面这个你信或则不信它都是一条<code>border-radius</code>的正确的代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">35px</span> <span class="number">25px</span> <span class="number">30px</span> <span class="number">20px</span> / <span class="number">35px</span> <span class="number">25px</span> <span class="number">15px</span> <span class="number">30px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果你没见过，可能会有些困惑，下面是一些介绍：</p>
<blockquote>
<p>如果给定的值中有“／”，则在“／”前面的值是指定水平方向的半径（radius），在“／”后面的就是指定垂直方向的半径（radius）。如果没有“／”，就是同时指定水平和垂直方向的半径（radius）。</p>
</blockquote>
<a id="more"></a>
<p><img src="http://7fvhwe.com1.z0.glb.clouddn.com/border.png" alt="border-radius 图解"></p>
<p>上面的图片表示：<code>border-top-left-radius: 55pt 25pt</code>。</p>
<p>而带有“／”的border-radius能让你创建非对称的弯曲边角。原作者有有一篇文章详细讲了，或则你可以读下面的张鑫旭的这篇。另外，你也可以去<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Background_and_Borders/Border-radius_generator" target="_blank" rel="external">MDN-boreder-radius</a>,学习下。</p>
<p><code>border-radius</code>值的设定在张鑫旭的博客<a href="http://www.zhangxinxu.com/wordpress/2015/11/css3-border-radius-tips/" target="_blank" rel="external">秋月何时了，CSS3 border-radius知多少？</a>上介绍的更为详细，有兴趣的同学可以去看看。</p>
<h3 id="2、font-weight-的值可以设置为相对值"><a href="#2、font-weight-的值可以设置为相对值" class="headerlink" title="2、font-weight 的值可以设置为相对值"></a>2、<code>font-weight</code> 的值可以设置为相对值</h3><p>你应该在设置<code>font-weight</code>值时用过<code>normal</code>或则<code>bold</code>，更甚你可能用过<code>100</code>,<code>200</code>到<code>900</code>的百位数。</p>
<p>有两个值经常被忘记，他们是<code>bolder</code>和<code>lighter</code>。在他们的描述中，其是相对于其父元素的<code>font-weight</code>更粗，或则更细。</p>
<p>在基于百位数的值中，<code>bold</code>相当于<code>700</code>而<code>normal</code>相当于<code>400</code>。因此如果存在300的值，当父对象是400时，lighter就等于300。而当没有更小的font-weight值时（比如400是最小的），那么lighter最小只能是400。 存不存在100、200、到900的font-weight是由使用的字体相关的。</p>
<p>下面是一个codepen的demo</p>
<p></p><p data-height="268" data-theme-id="17379" data-slug-hash="obWOWq" data-default-tab="result" data-user="hiluluke" class="codepen">See the Pen <a href="http://codepen.io/hiluluke/pen/obWOWq/" target="_blank" rel="external">Using bolder/lighter Keywords with font-weight</a> by hiluluke (<a href="http://codepen.io/hiluluke" target="_blank" rel="external">@hiluluke</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>在上面的例子中使用的字体是Exo2，其有18种不同的样式，所以能够展示所有基于百位的font-weight。上面的css文件中注释中在中庸bolder和lighter展示了对应的值。</p>
<p>你会发现，上面的例子只会有100，400，700，900。并不会有200，300，500，600，800。</p>
<p>这是字体自己定义的，Exo2这个字体就定义了100，400，700，900这几种font-weight，所以再取bolder和lighter时会在这几个值种选（就像这个<a href="https://www.google.com/fonts/specimen/Open+Sans" target="_blank" rel="external">栗子</a>）。</p>
<h3 id="3、outine-offset属性"><a href="#3、outine-offset属性" class="headerlink" title="3、outine-offset属性"></a>3、<code>outine-offset</code>属性</h3><p>outine-offset 比较出名的是其能帮助debuging(因为它不影响页面布局)。就像它名字一样，他是定义元素的outline和元素的距离的。看下面一个demo：</p>
<p></p><p data-height="268" data-theme-id="17379" data-slug-hash="rxmbzy" data-default-tab="result" data-user="hiluluke" class="codepen">See the Pen <a href="http://codepen.io/hiluluke/pen/rxmbzy/" target="_blank" rel="external">The outline-offset property</a> by hiluluke (<a href="http://codepen.io/hiluluke" target="_blank" rel="external">@hiluluke</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>对于outline-offset的不利就是，其能适用于所有浏览器除了ie11及以前。在移动端能够应用下。</p>
<h3 id="4、table-layout属性（个人感觉最有用的属性）"><a href="#4、table-layout属性（个人感觉最有用的属性）" class="headerlink" title="4、table-layout属性（个人感觉最有用的属性）"></a>4、<code>table-layout</code>属性（个人感觉最有用的属性）</h3><p>你可能知道<code>display:table</code>（最简单粗暴的实现垂直居中的方式）。但是这个不是我们说的，我们说的是table-layout属性而不是display属性。</p>
<p><code>table-layout</code>属性不是一个好描述的属性，我们先简单看个解释然后看个栗子。</p>
<blockquote>
<p>table的水平宽度是取决于内容的，这个属性就是改变使其取决于一行的border、spacing等内容。</p>
</blockquote>
<p>就算我转译了一下意思，应该还是不好理解。看下面的一个demo吧：</p>
<p></p><p data-height="268" data-theme-id="17379" data-slug-hash="yebrPJ" data-default-tab="result" data-user="hiluluke" class="codepen">See the Pen <a href="http://codepen.io/hiluluke/pen/yebrPJ/" target="_blank" rel="external">Using the table-layout property</a> by hiluluke (<a href="http://codepen.io/hiluluke" target="_blank" rel="external">@hiluluke</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>上面的demo种加入了<code>table-layout:fixed</code>,单击下面的按钮可以来回切换属性。</p>
<p>默认的是<code>table-layout:auto</code>。但是当有变化长度的内容时，你的排版会很乱（我之前是定的width：n％,当出现33.3% 时候就会有一列大一像素），这个时候使用fixed就很好。</p>
<h4 id="5、vertical-align在table-cells和其他属性表现不一致"><a href="#5、vertical-align在table-cells和其他属性表现不一致" class="headerlink" title="5、vertical-align在table cells和其他属性表现不一致"></a>5、<code>vertical-align</code>在table cells和其他属性表现不一致</h4><p>如果你感web编程在2000年代中期或则更早，vertical-align属性是html4标准的<a href="http://www.w3.org/TR/html401/struct/tables.html#adef-valign" target="_blank" rel="external">valign属性</a>。但是现在HTML5中就是过时的不合格的属性。</p>
<p>其实它并不只是在table中起作用，它在其他元素的定位上也很有意义。</p>
<p>那么它在其他元素和table cells中的表现有哪些不同？</p>
<p>当在其他元素中时：</p>
<ul>
<li>它只在<code>inline</code>和<code>inline-block</code>元素中起作用</li>
<li>它对元素内容没影响，只对元素相对于其他<code>inline</code>和<code>inline-block</code>元素的位置有影响。</li>
<li>它能够被相邻元素的text/font属性影响，比如<code>line-height</code>属性。</li>
</ul>
<p>下面是一个栗子：</p>
<p></p><p data-height="268" data-theme-id="17379" data-slug-hash="yebrKa" data-default-tab="result" data-user="hiluluke" class="codepen">See the Pen <a href="http://codepen.io/hiluluke/pen/yebrKa/" target="_blank" rel="external">Using the vertical-align property on inline elements</a> by hiluluke (<a href="http://codepen.io/hiluluke" target="_blank" rel="external">@hiluluke</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>当在table cells中时，vertical-align表现就非常不同了。当你给多个table cells设置值时，他们会被不同的基线影响。</p>
<p></p><p data-height="268" data-theme-id="17379" data-slug-hash="mVmgKo" data-default-tab="result" data-user="hiluluke" class="codepen">See the Pen <a href="http://codepen.io/hiluluke/pen/mVmgKo/" target="_blank" rel="external">Using vertical-align on table cells</a> by hiluluke (<a href="http://codepen.io/hiluluke" target="_blank" rel="external">@hiluluke</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<h3 id="6、-first-letter伪元素比你想象中更智能"><a href="#6、-first-letter伪元素比你想象中更智能" class="headerlink" title="6、::first-letter伪元素比你想象中更智能"></a>6、::first-letter伪元素比你想象中更智能</h3><p>感觉再智能，我们也用的不多。主要是英文有种格式会用到，咱略过。如果你感兴趣可以去看原文。</p>
<h3 id="7、你可以使用非法字符作为类名列表里"><a href="#7、你可以使用非法字符作为类名列表里" class="headerlink" title="7、你可以使用非法字符作为类名列表里"></a>7、你可以使用非法字符作为类名列表里</h3><p>这个观点在<a href="http://beneverard.co.uk/blog/using-slashes-within-the-html-class-attribute/" target="_blank" rel="external">Using slashes within the HTML class attribute</a>中提到，然后我认为值得推荐。</p>
<p>ben的观点是使用“／”去将类名分组，从而使得类名更容易阅读。他在文章中指出保留的“／”符号虽然是一个非法字符，但是浏览器不会在使用它是阻断，而是忽略它。</p>
<p>你可能看到过如下的代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col col-4 col-8 c-list bx bx--rounded bx--transparent"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当使用“／”时，它就变成：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col col-4 col-8 / c-list / bx bx--rounded bx--transparent"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>你能够使用任何字符（违规或则不违规）去产生相同的效果：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col col-4 col-8 ** c-list ** bx bx--rounded bx--transparent"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col col-4 col-8 || c-list || bx bx--rounded bx--transparent"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col col-4 col-8 &amp;&amp; c-list &amp;&amp; bx bx--rounded bx--transparent"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当然，你不可以在css里面用上面的违规字符。比如下面这个就是违法的并且不能应用相应的样式。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./ &#123;</div><div class="line">  color: blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当你使用这些特殊字符在css中时需要转义。可以用这个<a href="https://mothereff.in/css-escapes" target="_blank" rel="external">工具</a>转义。</p>
<p>比如上面的就会被转义为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.\/ &#123;</div><div class="line">  color: blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其他编码的字符也可以使用，通过转义工具转义就行了。比如♥ ★。。。（感觉可以自己玩玩，生产环境这么弄，要被其他队友骂死）</p>
<h3 id="8，-Animation-iterations-能够是分数"><a href="#8，-Animation-iterations-能够是分数" class="headerlink" title="8， Animation iterations 能够是分数"></a>8， Animation iterations 能够是分数</h3><p>我们应该已经知道<code>animation-iteration-count</code>是用来说明keyframe 动画的播放次数的。比如：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.example</span> &#123;</div><div class="line">  <span class="attribute">animation-iteration-count</span>: <span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的整数值表示动画将会播放3次，但是你可能不知道这里可以使用小数（分数）值。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.example</span> &#123;</div><div class="line">  <span class="attribute">animation-iteration-count</span>: .<span class="number">5</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面这个动画将会在半路就停止，也就是在第一次播放动画中间时间停止。下面是一个栗子，点击按钮，观看。</p>
<p></p><p data-height="268" data-theme-id="17379" data-slug-hash="wMdbKG" data-default-tab="result" data-user="hiluluke" class="codepen">See the Pen <a href="http://codepen.io/hiluluke/pen/wMdbKG/" target="_blank" rel="external">Using Fractional Iteration Count with Linear Timing Function</a> by hiluluke (<a href="http://codepen.io/hiluluke" target="_blank" rel="external">@hiluluke</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>


<p>有趣的是，iteration duration是根据时间来算的。也就是说，如果你动画是移动100px，那么如上面值为0.5时，将可能不在50px停，这个和<code>animation-timing-function</code>有关。</p>
<p>比如下面的栗子，<code>animation-timing-function</code>设置的是<code>ease</code>：</p>
<p></p><p data-height="268" data-theme-id="17379" data-slug-hash="pgPmgw" data-default-tab="result" data-user="hiluluke" class="codepen">See the Pen <a href="http://codepen.io/hiluluke/pen/pgPmgw/" target="_blank" rel="external">pgPmgw</a> by hiluluke (<a href="http://codepen.io/hiluluke" target="_blank" rel="external">@hiluluke</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>具体就不解释了。上面栗子很好懂。</p>
<h3 id="9，-动画规则缩写会被动画名字给阻断"><a href="#9，-动画规则缩写会被动画名字给阻断" class="headerlink" title="9， 动画规则缩写会被动画名字给阻断"></a>9， 动画规则缩写会被动画名字给阻断</h3><p>这个很好理解，大概说下。就是如下<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.example</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: reverse <span class="number">2s</span> <span class="number">1s</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在指定动画时用了将多个值都放在animation时，其中reverse又是<code>animation-direction</code>的关键字。所以这里在实际中将不会运行。</p>
<p>所以实际中，需要注意动画命名不要和关键字重复。</p>
<h3 id="10，你能够选择一定范围的元素"><a href="#10，你能够选择一定范围的元素" class="headerlink" title="10，你能够选择一定范围的元素"></a>10，你能够选择一定范围的元素</h3><p>不知道是谁最先使用，第一次看见是在这个<a href="http://bittersmann.de/samples/08-15" target="_blank" rel="external">demo</a>。假设有一个20个元素的列表，你想要选择其中的7到14号，你可以像下面这样只是用一个选择器选择它：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ol</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(n+7)</span><span class="selector-pseudo">:nth-child(-n+14)</span> &#123;</div><div class="line">  <span class="attribute">background</span>: lightpink;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p></p><p data-height="268" data-theme-id="17379" data-slug-hash="obWRLV" data-default-tab="result" data-user="hiluluke" class="codepen">See the Pen <a href="http://codepen.io/hiluluke/pen/obWRLV/" target="_blank" rel="external">Selecting Ranges of Elements with CSS</a> by hiluluke (<a href="http://codepen.io/hiluluke" target="_blank" rel="external">@hiluluke</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>感觉用到不会太多。有兴趣的看看原文吧。原文还指出了一个在safari上的bug。</p>
<h3 id="11，-伪元素能够应用于一些空节点-没有结尾-lt-gt-的节点"><a href="#11，-伪元素能够应用于一些空节点-没有结尾-lt-gt-的节点" class="headerlink" title="11， 伪元素能够应用于一些空节点(没有结尾&lt;/&gt;的节点)"></a>11， 伪元素能够应用于一些空节点(没有结尾&lt;/&gt;的节点)</h3><p>有时候要给一些节点加伪元素，但是这些节点会被替换是不能添加伪元素的。这个时候就能使用哪些没有结尾的空节点，因为这些节点将不会被替换，比如<code>hr</code>节点。</p>
<p></p><p data-height="268" data-theme-id="17379" data-slug-hash="MKmdJr" data-default-tab="result" data-user="hiluluke" class="codepen">See the Pen <a href="http://codepen.io/hiluluke/pen/MKmdJr/" target="_blank" rel="external">Pseudo-elements on a Horizontal Rule (<hr> element)</a> by hiluluke (<a href="http://codepen.io/hiluluke" target="_blank" rel="external">@hiluluke</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>你同样能在<code>meta</code>和<code>link</code>节点上加伪元素，只要你设置他们<code>display:block</code>；</p>
<p></p><p data-height="268" data-theme-id="17379" data-slug-hash="dGWENE" data-default-tab="result" data-user="hiluluke" class="codepen">See the Pen <a href="http://codepen.io/hiluluke/pen/dGWENE/" target="_blank" rel="external">Adding pseudo-elements to meta tags and link (stylesheet) elements</a> by hiluluke (<a href="http://codepen.io/hiluluke" target="_blank" rel="external">@hiluluke</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>


<h3 id="12-一些节点属性是大小写敏感的"><a href="#12-一些节点属性是大小写敏感的" class="headerlink" title="12, 一些节点属性是大小写敏感的"></a>12, 一些节点属性是大小写敏感的</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>你可以使用属性选择来选取上面的节点：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-attr">[class="box"]</span> &#123;</div><div class="line">  <span class="attribute">color</span>: blue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="email"]</span> &#123;</div><div class="line">  <span class="attribute">border</span>: solid <span class="number">1px</span> red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面很正常，但是如果像下面这样：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-attr">[class="BOX"]</span> &#123;</div><div class="line">  <span class="attribute">color</span>: blue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="EMAIL"]</span> &#123;</div><div class="line">  <span class="attribute">border</span>: solid <span class="number">1px</span> red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>又会怎样呢？</p>
<p>上面的.box不会表现出blue的样式，因为class是大小写敏感的，而input会表现出相应的样式，因为其不名字不大小写敏感。</p>
<p>就这。</p>
<blockquote>
<p>如果你要转载。记得说是从<a href="http://hiluluke.cn转载的。" target="_blank" rel="external">http://hiluluke.cn转载的。</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文翻译自 &lt;a href=&quot;http://www.sitepoint.com/12-little-known-css-facts-the-sequel/?utm_source=html5weekly&amp;amp;utm_medium=email&quot;&gt;12 little known css facts(the-sequel)&lt;/a&gt;&lt;br&gt;原作者是&lt;a href=&quot;http://scncf-lab.com/&quot;&gt;Natalia Balska&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原作者在一年前也发表过一篇&lt;a href=&quot;http://www.sitepoint.com/12-little-known-css-facts/&quot;&gt;12个鲜为人知的css现象&lt;/a&gt;，然后这篇文章现在也还很受欢迎，有时间的同学可以看看。原作者又收集了更多的鲜为人知的css性质，也就是这篇文章的来源。&lt;/p&gt;
&lt;h3 id=&quot;1、border-radius-有“／”的语法&quot;&gt;&lt;a href=&quot;#1、border-radius-有“／”的语法&quot; class=&quot;headerlink&quot; title=&quot;1、border-radius 有“／”的语法&quot;&gt;&lt;/a&gt;1、&lt;code&gt;border-radius&lt;/code&gt; 有“／”的语法&lt;/h3&gt;&lt;p&gt;首先，下面这个你信或则不信它都是一条&lt;code&gt;border-radius&lt;/code&gt;的正确的代码：&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.box&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border-radius&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;35px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;35px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;15px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果你没见过，可能会有些困惑，下面是一些介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果给定的值中有“／”，则在“／”前面的值是指定水平方向的半径（radius），在“／”后面的就是指定垂直方向的半径（radius）。如果没有“／”，就是同时指定水平和垂直方向的半径（radius）。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://hiluluke.cn/categories/CSS/"/>
    
    
      <category term="css" scheme="http://hiluluke.cn/tags/css/"/>
    
      <category term="翻译" scheme="http://hiluluke.cn/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>canvas 笔记（1）</title>
    <link href="http://hiluluke.cn/2015/10/25/canvasNote1/"/>
    <id>http://hiluluke.cn/2015/10/25/canvasNote1/</id>
    <published>2015-10-24T16:00:00.000Z</published>
    <updated>2015-12-13T15:16:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初步"><a href="#初步" class="headerlink" title="初步"></a>初步</h2><p>首先需要在html中定义html结构<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"mycanvas"</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>然后需要在js上获取canvas和定义动画类型</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"mycanvas"</span>); <span class="comment">//获取canvas</span></div><div class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);<span class="comment">//定义2d动画</span></div></pre></td></tr></table></figure>
<p>然后就可以进行一些绘图操作：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">context.lineWidth = <span class="number">10</span>;定义线条宽度</div><div class="line">context.strokeStyle = <span class="string">"blue"</span>;<span class="comment">//定义线条样式（颜色）</span></div><div class="line">context.moveTo(<span class="number">50</span>, canvas.height)；移动光标</div><div class="line">contex.lineTo(x,y)<span class="comment">//从光标的位置画一条线到(x,y)</span></div><div class="line">context.stroke()绘图</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="线条"><a href="#线条" class="headerlink" title="线条"></a>线条</h2><h3 id="画弧"><a href="#画弧" class="headerlink" title="画弧"></a>画弧</h3><ul>
<li>context.arc(a, b, c, d, e, f);</li>
</ul>
<p>第一个参数，第二个参数是圆心坐标，第三个参数是开始弧度，第四个是结束弧度。最后一个参数是方向False = 顺时针，true = 逆时针。</p>
<ul>
<li>context.arcTo(x1, y1, x2, y2, radius);</li>
</ul>
<p>(x1,y1)弧的起点 （x2，y2）弧的终点 radius半径</p>
<h3 id="画二次曲线"><a href="#画二次曲线" class="headerlink" title="画二次曲线"></a>画二次曲线</h3><ul>
<li>context.quadraticCurveTo(controlX, controlY, endingPointX, endingPointY);</li>
</ul>
<p><img src="http://7fvhwe.com1.z0.glb.clouddn.com/选区_024.png" alt=""></p>
<p>其中context point是开始的光标位置。其中有4个相切。midpoint1,2上各有两个正切</p>
<h3 id="画贝塞尔曲线"><a href="#画贝塞尔曲线" class="headerlink" title="画贝塞尔曲线"></a>画贝塞尔曲线</h3><ul>
<li>context.bezierCurveTo(controlPointX1, controlPointY1,controlPointX2, controlPointY2, endingPointX, endingPointY);</li>
</ul>
<p>!()[<a href="http://7fvhwe.com1.z0.glb.clouddn.com/选区_025.png" target="_blank" rel="external">http://7fvhwe.com1.z0.glb.clouddn.com/选区_025.png</a>]</p>
<h3 id="线段端点"><a href="#线段端点" class="headerlink" title="线段端点"></a>线段端点</h3><ul>
<li><p>context.linejoin=x;线交点样式<br>其中x有3个选线：bevel（斜角）、round（圆角）、miter（默认尖角）</p>
</li>
<li><p>context.linegap=x;线的端点样式<br>其中x有3个参数：butt（默认，平直边缘）、round(圆形线帽)、square（正方形线帽）</p>
</li>
</ul>
<h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><p>context.font = “40pt Calibri”;设置字体大小<br>context.fillText(“Hello World!”, canvas.width / 2, 120);绘文字<br>context.strokeText(“Hello World!”, x, y);等价于上面</p>
<h2 id="线条demo：分型树"><a href="#线条demo：分型树" class="headerlink" title="线条demo：分型树"></a>线条demo：分型树</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawBranches</span>(<span class="params">context, startX, startY, trunkWidth, level</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (level &lt; <span class="number">12</span>) &#123;</div><div class="line">    <span class="keyword">var</span> changeX = <span class="number">100</span> / (level + <span class="number">1</span>);</div><div class="line">    <span class="keyword">var</span> changeY = <span class="number">200</span> / (level + <span class="number">1</span>);</div><div class="line">    <span class="keyword">var</span> topRightX = startX + <span class="built_in">Math</span>.random() * changeX+<span class="number">10</span>;</div><div class="line">    <span class="keyword">var</span> topRightY = startY - <span class="built_in">Math</span>.random() * changeY;</div><div class="line">    <span class="keyword">var</span> topLeftX = startX - <span class="built_in">Math</span>.random() * changeX<span class="number">-10</span>;</div><div class="line">    <span class="keyword">var</span> topLeftY = startY - <span class="built_in">Math</span>.random() * changeY;</div><div class="line">    <span class="comment">// draw right branch</span></div><div class="line">    context.beginPath();</div><div class="line">    context.moveTo(startX + trunkWidth / <span class="number">4</span>, startY);</div><div class="line">    context.quadraticCurveTo(startX + trunkWidth / <span class="number">4</span>, startY - trunkWidth, topRightX, topRightY);</div><div class="line">    context.lineWidth = trunkWidth;</div><div class="line">    context.lineCap = <span class="string">"round"</span>;</div><div class="line">    context.stroke();</div><div class="line">    <span class="comment">// draw left branch</span></div><div class="line">    context.beginPath();</div><div class="line">    context.moveTo(startX - trunkWidth / <span class="number">4</span>, startY);</div><div class="line">    context.quadraticCurveTo(startX - trunkWidth / <span class="number">4</span>, startY - trunkWidth, topLeftX, topLeftY);</div><div class="line">    context.lineWidth = trunkWidth;</div><div class="line">    context.stroke();</div><div class="line">    drawBranches(context, topRightX, topRightY, trunkWidth * <span class="number">0.7</span>, level + <span class="number">1</span>);</div><div class="line">    drawBranches(context, topLeftX, topLeftY, trunkWidth * <span class="number">0.7</span>, level + <span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="形状"><a href="#形状" class="headerlink" title="形状"></a>形状</h2><h3 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">context.rect(x,y,width,height);</div><div class="line">context.fillStyle = <span class="string">"#8ED6FF"</span>;</div><div class="line">context.fill();</div><div class="line">context.lineWidth = <span class="number">5</span>;</div><div class="line">context.strokeStyle = <span class="string">"black"</span>;</div></pre></td></tr></table></figure>
<p>上述方法绘制一个带边框的矩形。(x,y)为开始绘制的左上定点，width和height为宽高</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">context.fillRect(x,y,width,height);</div><div class="line">context.strokeRect(x,y,width,height);</div></pre></td></tr></table></figure>
<p>上面为绘制填充矩形和描边矩形，就一个没边，一个没填充</p>
<h3 id="画一个圆"><a href="#画一个圆" class="headerlink" title="画一个圆"></a>画一个圆</h3><p>之前画弧的arc</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">context.arc(canvas.width / <span class="number">2</span>, canvas.height / <span class="number">2</span>, <span class="number">70</span>, <span class="number">0</span>, <span class="number">2</span> *<span class="built_in">Math</span>.PI, <span class="literal">false</span>);</div><div class="line">context.fillStyle = <span class="string">"#8ED6FF"</span>;</div><div class="line">context.fill();</div><div class="line">context.lineWidth = <span class="number">5</span>;</div><div class="line">context.strokeStyle = <span class="string">"black"</span>;</div></pre></td></tr></table></figure>
<h3 id="自定义形状和样式"><a href="#自定义形状和样式" class="headerlink" title="自定义形状和样式"></a>自定义形状和样式</h3><ul>
<li>context.closePath();闭合路径</li>
<li>context.fillStyle = fillStyle;其中fillStyle可以是一个颜色，还可以是一个图片也可以是一个渐变对象：<br>   grd = context.createLinearGradient(canvas.width <em> 2 / 5, triangleY, canvas.width </em> 2 / 5, triangleY + triangleHeight);<br>   grd.addColorStop(0, “#8ED6FF”); // light blue<br>   grd.addColorStop(1, “#004CB3”); // dark blue<br>grd = context.createLinearGradient(canvas.width <em> 2 / 5, triangleY, canvas.width </em> 2 / 5, triangleY + triangleHeight);<br>线性渐变上面4个参数分别是渐变开始点的(x,y)坐标和结束点(x,y)坐标</li>
</ul>
<p>然后指定渐变颜色是：<br>grd.addColorStop(0, “#8ED6FF”); // light blue<br>grd.addColorStop(1, “#004CB3”); // dark blue<br>第一个参数是百分比位置，第二个参数是渐变颜色值</p>
<ul>
<li>grd = context.createRadialGradient(centerX, centerY, 10, centerX, centerY, 100);</li>
</ul>
<p>径向渐变和线性渐变差不多,其中第三个参数和第六个参数分别是开始圆的半径和结束圆的半径</p>
<ul>
<li>var pattern = context.createPattern(image,”repeat|repeat-x|repeat-y|no-repeat”);</li>
</ul>
<p>第一个参数可以是image或者video或者画布，第二个参数指定重复。<br>他是指定为fillStyle的。可以用来填充图像、视频、画布。</p>
<h3 id="画透明的形状"><a href="#画透明的形状" class="headerlink" title="画透明的形状"></a>画透明的形状</h3><p>context.globalAlpha = 0.5;<br>设置全局透明度。</p>
<h3 id="save和restore"><a href="#save和restore" class="headerlink" title="save和restore"></a>save和restore</h3><p>context.save();保存之前的样式设置<br>context.restore();恢复之前的样式设置</p>
<h3 id="图形混合运算"><a href="#图形混合运算" class="headerlink" title="图形混合运算"></a>图形混合运算</h3><ul>
<li>context.globalCompositeOperation = x;<br>其中x可以是：source-atop / source-in / source-out / source-over / destination-atop / destionation-in / destionation-out / destination-over / lighter / xor / copy</li>
</ul>
<p><img src="http://7fvhwe.com1.z0.glb.clouddn.com/选区_026.png" alt=""></p>
<p>上面的图都是在相同的位置画一个正方形和一个圆，然后用了不同的globalCompositeOperation得到的不同效果。</p>
<p>注意是先画的正方形后画的圆形</p>
<h2 id="图片和视频"><a href="#图片和视频" class="headerlink" title="图片和视频"></a>图片和视频</h2><h3 id="画一张图"><a href="#画一张图" class="headerlink" title="画一张图"></a>画一张图</h3><ul>
<li><p>context.drawImage(this,x,y)<br>其中this是图片对象，而(x,y)是坐标。一般将上面代码放在image加载回调里面。</p>
</li>
<li><p>裁剪图片</p>
</li>
</ul>
<p>Context.drawImage(imageObj, sourceX, sourceY, sourceWidth, sourceHight,<br>destX, destY, destWidth, destHeight);看下面这张图应该就能懂了</p>
<p><img src="http://7fvhwe.com1.z0.glb.clouddn.com/选区_028.png" alt=""></p>
<ul>
<li>画视频</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  window.requestAnimFrame = (function(callback)&#123;</div><div class="line">    return window.requestAnimationFrame ||</div><div class="line">    window.webkitRequestAnimationFrame ||</div><div class="line">    window.mozRequestAnimationFrame ||</div><div class="line">    window.oRequestAnimationFrame ||</div><div class="line">    window.msRequestAnimationFrame ||</div><div class="line">    function(callback)&#123;</div><div class="line">      window.setTimeout(callback, 1000 / 60);</div><div class="line">    &#125;;</div><div class="line">  &#125;)();</div><div class="line"></div><div class="line">  function drawFrame(context, video)&#123;</div><div class="line">    context.drawImage(video, 0, 0);</div><div class="line">    requestAnimFrame(function()&#123;</div><div class="line">      drawFrame(context, video);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  window.onload = function()&#123;</div><div class="line">    var canvas = document.getElementById("myCanvas");</div><div class="line">    var context = canvas.getContext("2d");</div><div class="line">    var video = document.getElementById("myVideo");</div><div class="line">    drawFrame(context, video);</div><div class="line">  &#125;;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  &lt;video id="myVideo" autoplay="true" loop="true" style="display:none;"&gt;</div><div class="line">  &lt;source src="http://www.html5canvastutorials.com/cookbook/ch3/1369_03_03/BigBuckBunny_640x360.ogv" type="video/ogg"&gt;&lt;source src="http://www.html5canvastutorials.com/cookbook/ch3/1369_03_03/BigBuckBunny_640x360.mp4" type="video/mp4"&gt;</div><div class="line">&lt;/video&gt;</div><div class="line">  &lt;canvas id="myCanvas" width="600" height="360" style="border:1px solid black;"&gt;</div><div class="line">&lt;/canvas&gt;</div></pre></td></tr></table></figure>
<p>主要思想：将video隐藏，然后一帧一帧抓video呈现在canvas</p>
<ul>
<li>获取图片数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> imagedata = context.getImageData(sourceX,sourceY,sourceWidth,sourceHeight)</div></pre></td></tr></table></figure>
<p>参数分别是起点坐标和宽高。<br>获取已经画好的image的数据，其返回一个对象。<br>imagedata.data.length大小数据,其中data表示多少个像素<br>imagedata.width宽度<br>imagedata.height高度数据</p>
<ul>
<li>像素反色</li>
</ul>
<p>context.putImageData(imageData, destX, destY);<br>将image数据放进固定位置</p>
<p>反色代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">context.drawImage(<span class="keyword">this</span>, destX, destY);</div><div class="line"><span class="keyword">var</span> imageData = context.getImageData(sourceX, sourceY,</div><div class="line">sourceWidth, sourceHeight);</div><div class="line"><span class="keyword">var</span> data = imageData.data;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i += <span class="number">4</span>) &#123;</div><div class="line">  data[i] = <span class="number">255</span> - data[i]; <span class="comment">// red</span></div><div class="line">  data[i + <span class="number">1</span>] = <span class="number">255</span> - data[i + <span class="number">1</span>]; <span class="comment">// green</span></div><div class="line">  data[i + <span class="number">2</span>] = <span class="number">255</span> - data[i + <span class="number">2</span>]; <span class="comment">// blue</span></div><div class="line">  <span class="comment">// i+3 is alpha (the fourth element)</span></div><div class="line">&#125;</div><div class="line">  <span class="comment">// overwrite original image with</span></div><div class="line">  <span class="comment">// new image data</span></div><div class="line">  context.putImageData(imageData, destX, destY);</div><div class="line">&#125;;</div><div class="line">  imageObj.src = <span class="string">"jet_300x214.jpg"</span>;</div></pre></td></tr></table></figure>
<ul>
<li>转变图片灰度</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i += <span class="number">4</span>) &#123;</div><div class="line">  <span class="keyword">var</span> brightness = <span class="number">0.34</span> * data[i] + <span class="number">0.5</span> * data[i + <span class="number">1</span>] + <span class="number">0.16</span> * data[i + <span class="number">2</span>];</div><div class="line">  data[i] = brightness; <span class="comment">// red</span></div><div class="line">  data[i + <span class="number">1</span>] = brightness; <span class="comment">// green</span></div><div class="line">  data[i + <span class="number">2</span>] = brightness; <span class="comment">// blue</span></div><div class="line">  <span class="comment">// i+3 is alpha (the fourth element)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>将一个canvas画布转换成data URL<br>可以使用local storge将data url数据存储到本地</li>
</ul>
<p>var dataURL = canvas.toDataURL();</p>
<p>其中返回的dataURL就是data URL<br>将datauri指定在src中就可以载入图片。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;初步&quot;&gt;&lt;a href=&quot;#初步&quot; class=&quot;headerlink&quot; title=&quot;初步&quot;&gt;&lt;/a&gt;初步&lt;/h2&gt;&lt;p&gt;首先需要在html中定义html结构&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;mycanvas&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;600&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;300&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后需要在js上获取canvas和定义动画类型&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; canvas = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;mycanvas&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//获取canvas&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; context = canvas.getContext(&lt;span class=&quot;string&quot;&gt;&quot;2d&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//定义2d动画&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后就可以进行一些绘图操作：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;context.lineWidth = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;定义线条宽度&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;context.strokeStyle = &lt;span class=&quot;string&quot;&gt;&quot;blue&quot;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//定义线条样式（颜色）&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;context.moveTo(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;, canvas.height)；移动光标&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;contex.lineTo(x,y)&lt;span class=&quot;comment&quot;&gt;//从光标的位置画一条线到(x,y)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;context.stroke()绘图&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JS" scheme="http://hiluluke.cn/categories/JS/"/>
    
    
      <category term="javascript" scheme="http://hiluluke.cn/tags/javascript/"/>
    
      <category term="canvas" scheme="http://hiluluke.cn/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>less note</title>
    <link href="http://hiluluke.cn/2015/10/20/lessNote/"/>
    <id>http://hiluluke.cn/2015/10/20/lessNote/</id>
    <published>2015-10-19T16:00:00.000Z</published>
    <updated>2015-12-13T15:16:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>less比较好入门，看了2-3个小时的文档，觉得已经7788了。东西并不是很多。这个笔记比较干，比较精简，建议还是看文档好些，反正不难。</p>
<h3 id="less基础"><a href="#less基础" class="headerlink" title="less基础"></a>less基础</h3><ul>
<li>less运行<br>其可以在html中嵌入一个less.js文件或则使用node工具lessc，也可以用gulp，grunt在部署之前编译。</li>
</ul>
<p><strong>lessc</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g lessc</div></pre></td></tr></table></figure></p>
<p>然后就可以使用命令行编译less了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lessc test.less test.css</div></pre></td></tr></table></figure>
<p>上面代码就会将test.less编译输出在当前目录下test.css。</p>
<a id="more"></a>
<p><strong>gulp</strong></p>
<p>gulp下面有插件<code>gulp-less</code>可以在部署的时候编译less。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'less'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./less/**/*.less'</span>)</div><div class="line">    .pipe(less())</div><div class="line">    .pipe(gulp.dest(<span class="string">'./public/css'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的代码就将./less下面所有文件夹里面以less结尾的文件全部编译输出到public/css下面。</p>
<ul>
<li>less变量<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@base-color:</span> red;</div><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="variable">@base-color</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">    <span class="attribute">color</span>: <span class="variable">@base-color</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">button</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="variable">@base-color</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>将被编译成<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">button</span> &#123;</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>混合变量</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.rounded-corners</span>(arg) &#123;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="variable">@arg</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="selector-class">.rounded-corners</span>(<span class="number">10px</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将会被编译成：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>就是一种混合使用的方式，可以将其他类的样式在另外一个类里面添加。</p>
<ul>
<li>通过嵌套让css变得更直接</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">section</span> &#123;</div><div class="line">    <span class="selector-tag">p</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">10px</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">h1</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">20px</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将会编译成：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">section</span> <span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">section</span> <span class="selector-tag">h1</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>操作变量</li>
</ul>
<p>可以给变量进行数值运算。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@basic-width:</span> <span class="number">800px</span>;</div><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="variable">@basic-width</span>;</div><div class="line">    <span class="selector-tag">section</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="variable">@basic-width</span> * <span class="number">2</span>/<span class="number">3</span>;</div><div class="line">        <span class="attribute">background-color</span>:red;</div><div class="line">        <span class="attribute">color</span>:white;</div><div class="line">        <span class="attribute">float</span>:left;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">aside</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="variable">@basic-width</span> * <span class="number">1</span>/<span class="number">3</span>;</div><div class="line">        <span class="attribute">background-color</span>: black;</div><div class="line">        <span class="attribute">color</span>: white;</div><div class="line">        <span class="attribute">float</span>: right;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>然后就是些内建的函数，主要是操作颜色的</p>
</li>
<li><p>命名空间</p>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.mixin</span>()&#123;</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.mixin</span>()&#123;</div><div class="line">    <span class="attribute">color</span>: blue;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">e1</span> &#123;</div><div class="line">    mixin</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将被编译成：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">e1</span> &#123;</div><div class="line"><span class="attribute">color</span>:red;</div><div class="line"><span class="attribute">color</span>:blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但是如果指定命名空间<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#namespace</span> &#123;</div><div class="line"><span class="selector-class">.mixin</span>()&#123;</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.mixin</span>()&#123;</div><div class="line">    <span class="attribute">color</span>: blue;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">e1</span> &#123;</div><div class="line">    <span class="selector-id">#namespace</span> &gt; <span class="selector-tag">mixin</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>就会指定空间下面进行编译<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">e1</span> &#123;</div><div class="line"><span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>笔记完。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;less比较好入门，看了2-3个小时的文档，觉得已经7788了。东西并不是很多。这个笔记比较干，比较精简，建议还是看文档好些，反正不难。&lt;/p&gt;
&lt;h3 id=&quot;less基础&quot;&gt;&lt;a href=&quot;#less基础&quot; class=&quot;headerlink&quot; title=&quot;less基础&quot;&gt;&lt;/a&gt;less基础&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;less运行&lt;br&gt;其可以在html中嵌入一个less.js文件或则使用node工具lessc，也可以用gulp，grunt在部署之前编译。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;lessc&lt;/strong&gt;：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo npm install -g lessc&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后就可以使用命令行编译less了。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;lessc test.less test.css&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码就会将test.less编译输出在当前目录下test.css。&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="http://hiluluke.cn/categories/Tool/"/>
    
    
      <category term="css" scheme="http://hiluluke.cn/tags/css/"/>
    
      <category term="less" scheme="http://hiluluke.cn/tags/less/"/>
    
  </entry>
  
  <entry>
    <title>javascript继承</title>
    <link href="http://hiluluke.cn/2015/10/14/js-inherit/"/>
    <id>http://hiluluke.cn/2015/10/14/js-inherit/</id>
    <published>2015-10-13T16:00:00.000Z</published>
    <updated>2015-12-13T15:16:48.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文主要是自己在阅读<a href="http://www.ituring.com.cn/book/946" target="_blank" rel="external">javascript高级程序设计</a>之后所做的笔记。</p>
</blockquote>
<p>js的继承主要依靠原型链的方式实现，与一般的oo语言有些不一样。</p>
<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>利用原型让一个引用类型继承另一个引用类型的属性和方法。让原型对象等于另一个类型的实例。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.property = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.property;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">this</span>.subproperty = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//继承了 SuperType</span></div><div class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</div><div class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.subproperty;</div><div class="line">&#125;;  </div><div class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</div><div class="line">alert(instance.getSuperValue());<span class="comment">//true</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="http://7fvhwe.com1.z0.glb.clouddn.com/%E9%80%89%E5%8C%BA_008.png" alt="原型链"></p>
<p>原型对象等于实例，即使得该对象原型的原型（从图中可以看出）指向实例的原型，从而继承了上一个对象的原型中的属性和方法。</p>
<h4 id="默认原型"><a href="#默认原型" class="headerlink" title="默认原型"></a>默认原型</h4><p>所有引用类型都继承了Object</p>
<h4 id="确定原型和实例的继承关系"><a href="#确定原型和实例的继承关系" class="headerlink" title="确定原型和实例的继承关系"></a>确定原型和实例的继承关系</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">alert(instance <span class="keyword">instanceof</span> <span class="built_in">Object</span>);<span class="comment">//true</span></div><div class="line">alert(instance <span class="keyword">instanceof</span> SuperType);<span class="comment">//true</span></div><div class="line">alert(instance <span class="keyword">instanceof</span> SubType);<span class="comment">//true</span></div><div class="line">alert(<span class="built_in">Object</span>.prototype.isPrototypeOf(instance));<span class="comment">//true</span></div><div class="line">alert(SuperType.prototype.isPrototypeOf(instance));<span class="comment">//true</span></div><div class="line">alert(SubType.prototype.isPrototypeOf(instance));<span class="comment">//true</span></div></pre></td></tr></table></figure>
<h4 id="谨慎定义方法"><a href="#谨慎定义方法" class="headerlink" title="谨慎定义方法"></a>谨慎定义方法</h4><ul>
<li>子类型在需要重写超类型中某个方法，或则需要添加超类型中不存在的某个方法。这钟情况下，给原型添加方法的代码一定要放在替换原型的语句之后。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.property = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.property;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.subproperty = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//继承了 SuperType</span></div><div class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</div><div class="line"><span class="comment">//添加新方法</span></div><div class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.subproperty;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//重写超类型中的方法</span></div><div class="line">SubType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</div><div class="line">alert(instance.getSuperValue());<span class="comment">//false</span></div></pre></td></tr></table></figure>
<p>就如同上面代码中定义顺序一样。</p>
<p><strong>另外需要注意，通过原型链实现继承时，不能通过对象字面量创建原型方法。因为这样会重写原型链。</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.property = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.property;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.subproperty = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//继承了 SuperType</span></div><div class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</div><div class="line"><span class="comment">//使用字面量添加新方法,会导致上一行代码无效</span></div><div class="line">SubType.prototype = &#123;</div><div class="line">	getSubValue : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.subproperty;</div><div class="line">&#125;,</div><div class="line">someOtherMethod : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</div><div class="line">alert(instance.getSuperValue());</div><div class="line"><span class="comment">//error!</span></div></pre></td></tr></table></figure>
<p>如上所示，就是用字面量的方式定义了原型，那样就重写了原型链。</p>
<h4 id="原型链的问题"><a href="#原型链的问题" class="headerlink" title="原型链的问题"></a>原型链的问题</h4><p>引用类型值的问题，前面提过引用类型值会被所有实例<strong>共享</strong>。而在这里的通过原型来实现继承，原型实际上变成了另一个类型的实例。于是，原先的实例属性也就顺理成章的变成了现在的原型属性。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="comment">//继承了 SuperType</span></div><div class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</div><div class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</div><div class="line">instance1.colors.push(<span class="string">"black"</span>);</div><div class="line">alert(instance1.colors);<span class="comment">//"red,blue,green,black"</span></div><div class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();</div><div class="line">alert(instance2.colors);<span class="comment">//"red,blue,green,black"</span></div></pre></td></tr></table></figure>
<p>在创建子类型的实例时，不能向超类型的构造函数中传递参数。</p>
<h3 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h3><ul>
<li>思想：即在子类型构造函数内部调用超类型构造函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//继承了 SuperType</span></div><div class="line">	SuperType.call(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</div><div class="line">instance1.colors.push(<span class="string">"black"</span>);</div><div class="line">alert(instance1.colors);<span class="comment">//"red,blue,green,black"</span></div><div class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();</div><div class="line">alert(instance2.colors);<span class="comment">//"red,blue,green"</span></div></pre></td></tr></table></figure>
<p>代码中加粗的那一行“借调”了超类型的构造函数。通过call()方法，我们在subtype实例环境下调用了supertype构造函数。</p>
<ul>
<li>传递参数，借用构造函数有一个很大优势，即可以在子类型构造函数中向超类型中传递参数</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//继承了 SuperType,同时还传递了参数</span></div><div class="line">	SuperType.call(<span class="keyword">this</span>, <span class="string">"Nicholas"</span>);</div><div class="line">	<span class="comment">//实例属性</span></div><div class="line">	<span class="keyword">this</span>.age = <span class="number">29</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</div><div class="line">alert(instance.name);<span class="comment">//"Nicholas";</span></div><div class="line">alert(instance.age);<span class="comment">//29</span></div></pre></td></tr></table></figure>
<ul>
<li>存在的问题<br>方法都在构造函数中定义，因此函数复用就无从谈起。</li>
</ul>
<h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><ul>
<li>将原型链和借用构造函数组合使用</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</div><div class="line">&#125;</div><div class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>)</span>&#123;</div><div class="line">	<span class="comment">//继承属性</span></div><div class="line">	SuperType.call(<span class="keyword">this</span>, name);</div><div class="line">	<span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line"><span class="comment">//继承方法</span></div><div class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</div><div class="line">SubType.prototype.constructor = SubType;</div><div class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   alert(<span class="keyword">this</span>.age);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">"Nicholas"</span>, <span class="number">29</span>);</div><div class="line">instance1.colors.push(<span class="string">"black"</span>);</div><div class="line">alert(instance1.colors);<span class="comment">//"red,blue,green,black"</span></div><div class="line">instance1.sayName();<span class="comment">//"Nicholas";</span></div><div class="line">instance1.sayAge();<span class="comment">//29</span></div><div class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType(<span class="string">"Greg"</span>, <span class="number">27</span>);</div><div class="line">alert(instance2.colors);<span class="comment">//"red,blue,green"</span></div><div class="line">instance2.sayName();<span class="comment">//"Greg";</span></div><div class="line">instance2.sayAge();<span class="comment">//27</span></div></pre></td></tr></table></figure>
<p>在这个例子中, SuperType 构造函数定义了两个属性: name 和 colors 。 SuperType 的原型定义了一个方法 sayName() 。 SubType 构造函数在调用 SuperType 构造函数时传入name 参数,紧接着又定义了它自己的属性 age 。然后,将 SuperType 的实例赋值给 SubType 的原型,然后又在该新原型上定义了方法 sayAge() 。这样一来,就可以让两个不同的SubType 实例既分别拥有自己属性——包括 colors 属性,又可以使用相同的方法了。</p>
<ul>
<li>融合两者优点，最常用的继承模式</li>
</ul>
<p>另外在<a href="http://www.ituring.com.cn/book/946" target="_blank" rel="external">javascript高级程序设计</a>上还有3种继承方式，原型式继承和寄生式继承和寄生组合继承。大家可以自己去看。</p>
<blockquote>
<p>本文为原创文章，转载请注明出处。<br>本文地址：<a href="http://hiluluke.cn/2015/10/14/js-inherit/">http://hiluluke.cn/2015/10/14/js-inherit/</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要是自己在阅读&lt;a href=&quot;http://www.ituring.com.cn/book/946&quot;&gt;javascript高级程序设计&lt;/a&gt;之后所做的笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;js的继承主要依靠原型链的方式实现，与一般的oo语言有些不一样。&lt;/p&gt;
&lt;h3 id=&quot;原型链&quot;&gt;&lt;a href=&quot;#原型链&quot; class=&quot;headerlink&quot; title=&quot;原型链&quot;&gt;&lt;/a&gt;原型链&lt;/h3&gt;&lt;p&gt;利用原型让一个引用类型继承另一个引用类型的属性和方法。让原型对象等于另一个类型的实例。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SuperType&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.property = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SuperType.prototype.getSuperValue = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.property;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SubType&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.subproperty = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//继承了 SuperType&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SubType.prototype = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SuperType();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SubType.prototype.getSubValue = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.subproperty;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SubType();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(instance.getSuperValue());&lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JS" scheme="http://hiluluke.cn/categories/JS/"/>
    
    
      <category term="javascript" scheme="http://hiluluke.cn/tags/javascript/"/>
    
      <category term="前端" scheme="http://hiluluke.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>gulp note</title>
    <link href="http://hiluluke.cn/2015/10/14/gulp/"/>
    <id>http://hiluluke.cn/2015/10/14/gulp/</id>
    <published>2015-10-13T16:00:00.000Z</published>
    <updated>2016-02-08T11:53:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几天公司一个同事说了gulp用着太爽了，比grunt语法好很多。然后就猴急的尝试了下，并在公司之前的一个项目上做了实验。觉得有下面几点优点：</p>
<ul>
<li>更像是就是js语法，写起来很顺</li>
<li>代码执行顺序更清晰</li>
<li>代码量更少，主要是因为grunt各种大小括号换行导致其看起来很臃肿。</li>
<li>gulp.watch 太好用了。。</li>
</ul>
<p>当然有几点grunt也是有优点，比如本省就支持在代码上面添加banner，但是gulp需要使用插件。</p>
<p>最后，推荐小伙伴也尝试着去使用gulp。下面是我自己的一些笔记。</p>
<h3 id="gulp常用插件"><a href="#gulp常用插件" class="headerlink" title="gulp常用插件"></a>gulp常用插件</h3><ul>
<li>less的编译<a href="github.com/plus3network/gulp-less">gulp-less</a></li>
<li>自动添加css前缀<a href="http://github.com/Metrime/gulp-autoprefixer" target="_blank" rel="external">gulp-autoprefixer</a></li>
<li>压缩css<a href="http://github.com/jonathanepollack/gulp-minify-css" target="_blank" rel="external">gulp-minify-css</a></li>
<li>js代码校验<a href="http://github.com/spenceralger/gulp-jshint" target="_blank" rel="external">gulp-jshint</a></li>
<li>给代码头部添加公司等之类的注释 <a href="https://www.npmjs.com/package/gulp-header" target="_blank" rel="external">gulp-header</a></li>
<li>替换文本，用于修改版本号之类的 <a href="github.com/lazd/gulp-replace">gulp-replace</a></li>
<li>合并js文件<a href="http://github.com/wearefractal/gulp-concat" target="_blank" rel="external">gulp-concat</a></li>
<li>压缩js代码<a href="http://github.com/terinjokes/gulp-uglify" target="_blank" rel="external">gulp-uglify</a></li>
<li>压缩图片<a href="http://github.com/sindresorhus/gulp-imagemin" target="_blank" rel="external">gulp-imagemin</a></li>
<li>自动刷新页面<a href="http://github.com/vohof/gulp-livereload" target="_blank" rel="external">gulp-livereload</a></li>
<li>图片缓存，只有图片替换了才压缩<a href="http://github.com/jgable/gulp-cache" target="_blank" rel="external">gulp-cache</a></li>
<li>更改提醒<a href="http://github.com/mikaelbr/gulp-notify" target="_blank" rel="external">gulp-notify</a></li>
<li>清除文件<a href="http://www.npmjs.org/package/del" target="_blank" rel="external">del</a></li>
</ul>
<p>安装插件和grunt一样就用npm了，不啰嗦。</p>
<a id="more"></a>
<h3 id="使用及api"><a href="#使用及api" class="headerlink" title="使用及api"></a>使用及api</h3><p>当然和grunt一样需要创建任务文件，gulp的是gulpfile.js。</p>
<ul>
<li>加载插件<br>与grunt不同插件需要用require引用加载。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    sass = <span class="built_in">require</span>(<span class="string">'gulp-ruby-sass'</span>),</div><div class="line">    autoprefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>),</div><div class="line">    minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>),</div><div class="line">    jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>),</div><div class="line">    uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>),</div><div class="line">    imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>),</div><div class="line">    rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>),</div><div class="line">    concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>),</div><div class="line">    notify = <span class="built_in">require</span>(<span class="string">'gulp-notify'</span>),</div><div class="line">    cache = <span class="built_in">require</span>(<span class="string">'gulp-cache'</span>),</div><div class="line">    livereload = <span class="built_in">require</span>(<span class="string">'gulp-livereload'</span>),</div><div class="line">    del = <span class="built_in">require</span>(<span class="string">'del'</span>);</div></pre></td></tr></table></figure>
<h4 id="gulp-src-globs-options"><a href="#gulp-src-globs-options" class="headerlink" title="gulp.src(globs[,options])"></a>gulp.src(globs[,options])</h4><p>src指定需要处理的源文件的路径，借助unix的管道思想（pipe），前一级输出直接变成<br>后一级的输入，gulp.src返回当前文件流至可用插件；</p>
<ul>
<li>globs：需要处理的源文件匹配路径（必填）</li>
</ul>
<p>可以是具体指定文件:”seca/a.js”<br>还有：<code>&quot;*&quot;</code> 匹配所有文件<br><code>&quot;src/*.js&quot;</code>（包含src下的所有js文件）<br><code>&quot;**&quot;</code>匹配0个或者多个子文件夹<br><code>&quot;src/**/*.js&quot;</code>(匹配多个子文件夹的js文件)<br><code>&quot;{}&quot;</code>匹配多个属性<code>&quot;src/{a,b}.js&quot;</code><br><code>!</code>排除文件 （!src/a.js不包含src下的a.js文件）</p>
<ul>
<li>options 可选参数 opject 有3个属性buffer、read、base</li>
</ul>
<p>options.buffer boolean类型，默认为true。当设置为false时，返回file.content的流<br>并且不缓冲文件，处理大文件时非常有用。</p>
<p>options.read：  类型：Boolean  默认：true 设置false，将不执行读取文件操作，返回null；<br>options.base：  类型：String  设置输出路径以某个路径的某个组成部分为基础向后拼接，具体看下面示例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gulp.src(<span class="string">'client/js/**/*.js'</span>)</div><div class="line">  .pipe(minify())</div><div class="line">  .pipe(gulp.dest(<span class="string">'build'</span>));  <span class="comment">// Writes 'build/somedir/somefile.js'</span></div><div class="line"></div><div class="line">gulp.src(<span class="string">'client/js/**/*.js'</span>, &#123; base: <span class="string">'client'</span> &#125;)</div><div class="line">  .pipe(minify())</div><div class="line">  .pipe(gulp.dest(<span class="string">'build'</span>));  <span class="comment">// Writes 'build/js/somedir/somefile.js'</span></div></pre></td></tr></table></figure>
<h4 id="gulp-dest-path-options"><a href="#gulp-dest-path-options" class="headerlink" title="gulp.dest(path[,options])"></a>gulp.dest(path[,options])</h4><p>dest是在处理完后指定最后的输出路径。</p>
<p>path 必填，string 或则function 指定文件输出路径，或者定义函数返回文件输出路径亦可</p>
<p>options 可选，有两个属性，cwd,mode</p>
<p>options.cwd：  类型：String  默认：process.cwd()：前脚本的工作目录的路径 当文件输出路径为相对路径将会用到；<br>options.mode：  类型：String  默认：0777 指定被创建文件夹的权限；</p>
<h4 id="gulp-task-name-deps-fn"><a href="#gulp-task-name-deps-fn" class="headerlink" title="gulp.task(name[,deps],fn)"></a>gulp.task(name[,deps],fn)</h4><p>定义gulp任务</p>
<p>name必填，string，指定任务名称</p>
<p>deps可选，stringArray，指定该任务依赖的任务（被依赖的任务需要返回当前任务的事件流=）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'testLess'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'less/style.less'</span>])</div><div class="line">        .pipe(less())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./css'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'minicss'</span>, [<span class="string">'testLess'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//执行完testLess任务后再执行minicss任务</span></div><div class="line">    gulp.src([<span class="string">'css/*.css'</span>])</div><div class="line">        .pipe(minifyCss())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./dist/css'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>fn 必填：function该任务调用的插件操作。</p>
<h4 id="gulp-watch-glob-opts-tasks-or-gulp-watch-glob-opts-cb"><a href="#gulp-watch-glob-opts-tasks-or-gulp-watch-glob-opts-cb" class="headerlink" title="gulp.watch(glob [, opts], tasks) or gulp.watch(glob [, opts, cb])"></a>gulp.watch(glob [, opts], tasks) or gulp.watch(glob [, opts, cb])</h4><p>watch 用于监听文件变化，文件一修改就会执行指定的任务</p>
<p>glob：需要处理的源文件匹配符路径。</p>
<p>opts：可选：Object</p>
<p>tasks：必填，StringArray 需要执行的任务名称数组</p>
<p>cb(event) 可选：Function每个文件变化时执行的毁掉函数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'watch1'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'less/**/*.less'</span>, [<span class="string">'testLess'</span>]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watch2'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'js/**/*.js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'File '</span> + event.path + <span class="string">' was '</span> + event.type + <span class="string">', running tasks...'</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>主要就是task+dest+src+watch，然后再就是各种插件的使用，就ok了，上手很快，感觉3个小时左右就可以了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天公司一个同事说了gulp用着太爽了，比grunt语法好很多。然后就猴急的尝试了下，并在公司之前的一个项目上做了实验。觉得有下面几点优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更像是就是js语法，写起来很顺&lt;/li&gt;
&lt;li&gt;代码执行顺序更清晰&lt;/li&gt;
&lt;li&gt;代码量更少，主要是因为grunt各种大小括号换行导致其看起来很臃肿。&lt;/li&gt;
&lt;li&gt;gulp.watch 太好用了。。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然有几点grunt也是有优点，比如本省就支持在代码上面添加banner，但是gulp需要使用插件。&lt;/p&gt;
&lt;p&gt;最后，推荐小伙伴也尝试着去使用gulp。下面是我自己的一些笔记。&lt;/p&gt;
&lt;h3 id=&quot;gulp常用插件&quot;&gt;&lt;a href=&quot;#gulp常用插件&quot; class=&quot;headerlink&quot; title=&quot;gulp常用插件&quot;&gt;&lt;/a&gt;gulp常用插件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;less的编译&lt;a href=&quot;github.com/plus3network/gulp-less&quot;&gt;gulp-less&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;自动添加css前缀&lt;a href=&quot;http://github.com/Metrime/gulp-autoprefixer&quot;&gt;gulp-autoprefixer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;压缩css&lt;a href=&quot;http://github.com/jonathanepollack/gulp-minify-css&quot;&gt;gulp-minify-css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;js代码校验&lt;a href=&quot;http://github.com/spenceralger/gulp-jshint&quot;&gt;gulp-jshint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;给代码头部添加公司等之类的注释 &lt;a href=&quot;https://www.npmjs.com/package/gulp-header&quot;&gt;gulp-header&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;替换文本，用于修改版本号之类的 &lt;a href=&quot;github.com/lazd/gulp-replace&quot;&gt;gulp-replace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;合并js文件&lt;a href=&quot;http://github.com/wearefractal/gulp-concat&quot;&gt;gulp-concat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;压缩js代码&lt;a href=&quot;http://github.com/terinjokes/gulp-uglify&quot;&gt;gulp-uglify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;压缩图片&lt;a href=&quot;http://github.com/sindresorhus/gulp-imagemin&quot;&gt;gulp-imagemin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;自动刷新页面&lt;a href=&quot;http://github.com/vohof/gulp-livereload&quot;&gt;gulp-livereload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;图片缓存，只有图片替换了才压缩&lt;a href=&quot;http://github.com/jgable/gulp-cache&quot;&gt;gulp-cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;更改提醒&lt;a href=&quot;http://github.com/mikaelbr/gulp-notify&quot;&gt;gulp-notify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;清除文件&lt;a href=&quot;http://www.npmjs.org/package/del&quot;&gt;del&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安装插件和grunt一样就用npm了，不啰嗦。&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="http://hiluluke.cn/categories/Tool/"/>
    
    
      <category term="javascript" scheme="http://hiluluke.cn/tags/javascript/"/>
    
      <category term="构建工具" scheme="http://hiluluke.cn/tags/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>javascript对象</title>
    <link href="http://hiluluke.cn/2015/10/10/js-object/"/>
    <id>http://hiluluke.cn/2015/10/10/js-object/</id>
    <published>2015-10-09T16:00:00.000Z</published>
    <updated>2015-12-13T15:16:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要是因为再重新读了一遍<a href="http://www.ituring.com.cn/book/946" target="_blank" rel="external">《javascript高级程序设计》</a>（后文称其为js高）后对js的对象有了进一步认识，所以想写点东西总结下。</p>
<h2 id="js对象基础"><a href="#js对象基础" class="headerlink" title="js对象基础"></a>js对象基础</h2><h3 id="理解对象"><a href="#理解对象" class="headerlink" title="理解对象"></a>理解对象</h3><p>创建对象的方式有很多种，通常有以下三种：</p>
<ul>
<li>通过创建一个Object实例然后再添加属性和方法</li>
<li>通过对象字面量的方式的方式：</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">	name: <span class="string">"Nicholas"</span>,</div><div class="line">	age: <span class="number">29</span>,</div><div class="line">	job: <span class="string">"Software Engineer"</span>,</div><div class="line">	sayName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		alert(<span class="keyword">this</span>.name);</div><div class="line"> 	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>通过函数的方式</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.age = age;</div><div class="line">	<span class="keyword">this</span>.job = job;</div><div class="line">	<span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		alert(<span class="keyword">this</span>.name);</div><div class="line">	&#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>主要都是构建特征值和方法来构建对象，表面上，上述方法构造的对象大同小异。然而其相差还是比较大的，另外构建对象实际生产中的方式其实也不止上面几种，js高书上就总结了7种。</p>
<h3 id="属性类型"><a href="#属性类型" class="headerlink" title="属性类型"></a>属性类型</h3><p>js对象中主要有两种属性：数据属性和访问器属性</p>
<h4 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h4><p>其包含一个数据值的位置，可以读取和写入值。<br>其有4个可以描述其行为的特性：</p>
<ul>
<li>[[Configurable]]表示能否通过delete删除属性从而重新定义属性能否修改属性的特性，或则能否把属性修改为访问器属性。</li>
<li>[[Enumerable]]表示能否通过for-in循环返回属性</li>
<li>[[Writable]]表示能否修改属性的值</li>
<li>[[Value]]包含这个属性的数据值</li>
</ul>
<p>像上面那样在对象上定义属性，一般[[Configurable]]、[[Enumerable]]、[[[Writable]]特性都被设置成具体的值，而value被设置成具体的值，比如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">name: <span class="string">"Nicholas"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的name就被如上所述设置。</p>
<p>如果要修改属性的特性需要使用Object.definePrototype()方法。该方法接收3个参数，属性所在的对象、属性的名字和一个描述符对象。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;</div><div class="line">    writable: <span class="literal">false</span>,</div><div class="line">     value: <span class="string">"Nicholas"</span></div><div class="line">&#125;);</div><div class="line">alert(person.name);<span class="comment">//"Nicholas"</span></div><div class="line">person.name = <span class="string">"Greg"</span>;</div><div class="line">alert(person.name);<span class="comment">//"Nicholas"</span></div></pre></td></tr></table></figure>
<p>可以重复使用上面的方法修改特性，但是如果将configurable特性设置成false后就有限制了。</p>
<h4 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h4><p>不包含数值，包含一对getter和setter函数。读取数据，调用getter负责返回有效的值；写入调用setter函数传入新值，负责决定如何处理数据。</p>
<p>4个特性：</p>
<ul>
<li>[[Configurable]][[Enumerable]]和上面的一样</li>
<li>[[Get]]在读取属性时调用的函数</li>
<li>[[Set]]在写入属性时调用的函数</li>
</ul>
<p>访问器属性不能直接定义，必须使用Object.definePrototype()<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> book = &#123;</div><div class="line">  _year: <span class="number">2004</span>,</div><div class="line">  edition: <span class="number">1</span></div><div class="line">&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(book, <span class="string">"year"</span>, &#123;</div><div class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">this</span>._year;</div><div class="line">  &#125;,</div><div class="line">  set: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>)</span>&#123;</div><div class="line">     <span class="keyword">if</span> (newValue &gt; <span class="number">2004</span>) &#123;</div><div class="line">     <span class="keyword">this</span>._year = newValue;</div><div class="line">     <span class="keyword">this</span>.edition += newValue - <span class="number">2004</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">book.year = <span class="number">2005</span>;</div><div class="line">alert(book.edition);<span class="comment">//2</span></div></pre></td></tr></table></figure></p>
<h4 id="定义多个属性"><a href="#定义多个属性" class="headerlink" title="定义多个属性"></a>定义多个属性</h4><p>Object.defineProperties()可以定义多个属性</p>
<h4 id="读取属性特性"><a href="#读取属性特性" class="headerlink" title="读取属性特性"></a>读取属性特性</h4><p>Object.getOwnPropertyDescriptor()可以获取给定属性的描述符。这个方法接收两个参数：属性所在对象和要读取其描述符的属性名称，返回一个对象：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> book = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperties(book, &#123;</div><div class="line">  _year: &#123;</div><div class="line">    value: <span class="number">2004</span></div><div class="line">  &#125;,</div><div class="line">edition: &#123;</div><div class="line">   value: <span class="number">1</span></div><div class="line">&#125;,</div><div class="line">year: &#123;</div><div class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._year;</div><div class="line">&#125;,</div><div class="line">set: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>)</span>&#123;</div><div class="line">   <span class="keyword">if</span> (newValue &gt; <span class="number">2004</span>) &#123;</div><div class="line">   <span class="keyword">this</span>._year = newValue;</div><div class="line">   <span class="keyword">this</span>.edition += newValue - <span class="number">2004</span>;</div><div class="line">  &#125;</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(book, <span class="string">"_year"</span>);</div><div class="line">alert(descriptor.value);<span class="comment">//2004</span></div><div class="line">alert(descriptor.configurable); alert(<span class="keyword">typeof</span> descriptor.get);<span class="comment">//"undefined"</span></div><div class="line"><span class="keyword">var</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(book, <span class="string">"year"</span>);</div><div class="line">alert(descriptor.value);<span class="comment">//undefined</span></div><div class="line">alert(descriptor.enumerable);<span class="comment">//false</span></div><div class="line">alert(<span class="keyword">typeof</span> descriptor.get);<span class="comment">//"function"</span></div></pre></td></tr></table></figure>
<h2 id="多种对象创建方式"><a href="#多种对象创建方式" class="headerlink" title="多种对象创建方式"></a>多种对象创建方式</h2><h3 id="创建对象、工厂模式"><a href="#创建对象、工厂模式" class="headerlink" title="创建对象、工厂模式"></a>创建对象、工厂模式</h3><p>这种模式抽象创建具体对象过程</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">	o.name = name;</div><div class="line">	o.age = age;</div><div class="line">	o.job = job;</div><div class="line">	o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		alert(<span class="keyword">this</span>.name);</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</div><div class="line"><span class="keyword">var</span> person2 = createPerson(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</div></pre></td></tr></table></figure>
<p>可以无数次调用这个函数，每次它都会返回一个包含3个属性和一个方法的对象。</p>
<p><strong>问题</strong></p>
<p>上述方法有一个问题没有解决，对象识别的问题（即你对象类型的定义）。</p>
<h3 id="创建对象、构造函数模式"><a href="#创建对象、构造函数模式" class="headerlink" title="创建对象、构造函数模式"></a>创建对象、构造函数模式</h3><p>创建自定义构造函数，从而定义自定义对象属性和方法</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">   <span class="keyword">this</span>.name = name;</div><div class="line">   <span class="keyword">this</span>.age = age;</div><div class="line">   <span class="keyword">this</span>.job = job;</div><div class="line">   <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   alert(<span class="keyword">this</span>.name);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</div></pre></td></tr></table></figure>
<p>上面的方法就像Object和Array一样使用new新建对象，这种方式能够识别对象类型。</p>
<p>另外与工厂模式还有以下不同</p>
<ul>
<li>没有显示的创建对象，即没有用一个createPerson的函数</li>
<li>直接将属性和方法赋给this对象</li>
<li>没有return</li>
</ul>
<p>上面例子都保存着Person的一个不同实例。都有一个constructor属性，这个属性指向Person。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alert(person1.constructor == Person);<span class="comment">//true</span></div><div class="line">alert(person2.constructor == Person);<span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>构造函数可以当做函数使用，这时候会将属性添加到window下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</div><div class="line">person.sayName(); <span class="comment">//"Nicholas"</span></div><div class="line"><span class="comment">// 作为普通函数调用</span></div><div class="line">Person(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>); <span class="comment">// 添加到 window</span></div><div class="line"><span class="built_in">window</span>.sayName(); <span class="comment">//"Greg"</span></div><div class="line"><span class="comment">// 在另一个对象的作用域中调用</span></div><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">Person.call(o, <span class="string">"Kristen"</span>, <span class="number">25</span>, <span class="string">"Nurse"</span>);</div><div class="line">o.sayName(); <span class="comment">//"Kristen"</span></div></pre></td></tr></table></figure></p>
<p><strong>问题</strong></p>
<p>主要问题是每个方法都要在每个实例上重新创建一遍。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">   <span class="keyword">this</span>.name = name;</div><div class="line">   <span class="keyword">this</span>.age = age;</div><div class="line">   <span class="keyword">this</span>.job = job;</div><div class="line">   <span class="keyword">this</span>.sayName = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"alert(this.name)"</span>); <span class="comment">// 与声明函数在逻辑上是等价的</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因为每个Person实例豆瓣韩一个不同的Function实例，所以这种方式创建的函数sayName有不同的作用域链和标识符解析。也就是不同实例的同名函数是不相等的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(person1.sayName == person2.sayName);<span class="comment">//false</span></div></pre></td></tr></table></figure>
<p>在每次创建对象时都创建一个相同的方法是没有必要的。</p>
<p>可以像下面这样解决这个问题：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">  <span class="keyword">this</span>.job = job;</div><div class="line">  <span class="keyword">this</span>.sayName = sayName;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</div></pre></td></tr></table></figure></p>
<p>将sayName定义转移到构造函数外部，在内部将sayName设置成等于全局sayName函数，sayName是一个指向函数的指针，这也使得person1和person2共享同一个sayName函数。</p>
<h3 id="创建对象，原型模式"><a href="#创建对象，原型模式" class="headerlink" title="创建对象，原型模式"></a>创建对象，原型模式</h3><p>原型能让对象实例共享它所包含的属性和方法。可以不在构造函数中定义对象实例信息，而是将这些信息直接添加到原型对象中：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line">Person.prototype.name = <span class="string">"Nicholas"</span>;</div><div class="line">Person.prototype.age = <span class="number">29</span>;</div><div class="line">Person.prototype.job = <span class="string">"Software Engineer"</span>;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line">person1.sayName();<span class="comment">//"Nicholas"</span></div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</div><div class="line">person2.sayName();<span class="comment">//"Nicholas"</span></div><div class="line">alert(person1.sayName == person2.sayName）;<span class="comment">//true</span></div></pre></td></tr></table></figure>
<h4 id="理解原型对象"><a href="#理解原型对象" class="headerlink" title="理解原型对象"></a>理解原型对象</h4><ul>
<li><p>只要创建新函数，就会根据一组特定规则创建一个该函数的prototype属性，这个属性指向原型对象。</p>
</li>
<li><p>所有原型对象都会自动获得一个constructor属性，，这个属性包含一个指向prototype属性所在函数的指针。</p>
</li>
</ul>
<p><img src="http://7fvhwe.com1.z0.glb.clouddn.com/选区_006.png" alt="js原型"></p>
<p>原型实例之间的关系就如上图所示，原型对象默认只会取得constructor属性，至于其他方法则都是从Object继承而来。当调用构造函数创建一个新实例后，该实例的内部将包含一个指针(内容属性)指向构造函数的原型对象。</p>
<ul>
<li><p>我们无法访问[[Prototype]]属性，但是可以用isPrototypeOf()方法来确定对象之间是否存在这种关系。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alert(Person.prototype.isPrototypeOf(person1));<span class="comment">//true</span></div><div class="line">alert(Person.prototype.isPrototypeOf(person2));<span class="comment">//true</span></div></pre></td></tr></table></figure>
</li>
<li><p>后期js又增加了一个方法Object.getPrototypeOf()，返回[[prototype]]值。</p>
</li>
<li><p>可以通过实例访问原型中的值，但是不能重写原型中的值。当在实例中创建一个和原型同名的值时，将在实例中创建该属性，然后调用时候会覆盖原型中的值。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line">Person.prototype.name = <span class="string">"Nicholas"</span>;</div><div class="line">Person.prototype.age = <span class="number">29</span>;</div><div class="line">Person.prototype.job = <span class="string">"Software Engineer"</span>;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</div><div class="line">person1.name = <span class="string">"Greg"</span>;</div><div class="line">alert(person1.name);<span class="comment">//"Greg"——来自实例</span></div><div class="line">alert(person2.name);<span class="comment">//"Nicholas"——来自原型</span></div></pre></td></tr></table></figure>
<ul>
<li>当我们设置实例中的同名值为null时，并不会恢复指向原型的连接。我们需要使用delete餐能完全删除实例属性。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line">Person.prototype.name = <span class="string">"Nicholas"</span>;</div><div class="line">Person.prototype.age = <span class="number">29</span>;</div><div class="line">Person.prototype.job = <span class="string">"Software Engineer"</span>;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</div><div class="line">person1.name = <span class="string">"Greg"</span>;</div><div class="line">alert(person1.name);<span class="comment">//"Greg"——来自实例</span></div><div class="line">alert(person2.name); <span class="comment">//"Nicholas"——来自原型</span></div><div class="line"><span class="keyword">delete</span> person1.name;</div><div class="line">alert(person1.name); <span class="comment">//"Nicholas"——来自原型</span></div></pre></td></tr></table></figure>
<ul>
<li>确定属性是存在对象还是原型中：<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPrototypeProperty</span>(<span class="params">object, name</span>)</span>&#123;</div><div class="line">   <span class="keyword">return</span> !object.hasOwnProperty(name) &amp;&amp; (name <span class="keyword">in</span> object);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>上面使用了in和hasOwnproperty，大家可以百度之，个人觉得不是常用。</p>
<ul>
<li>更简单的原型语句</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line">Person.prototype = &#123;</div><div class="line">   name : <span class="string">"Nicholas"</span>,</div><div class="line">   age : <span class="number">29</span>,</div><div class="line">   job: <span class="string">"Software Engineer"</span>,</div><div class="line">   sayName : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   alert(<span class="keyword">this</span>.name);</div><div class="line"> &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上述方式和之前的方式产生相同的结果，不过constructor属性不再指向Person了。每创建一个函数就会创建prototype，然后自动获得constructor。但是上面这个重写了默认的prototype对象，因此constructor属性也就变成了新对象的constructor属性（指向Object构造函数）。</p>
<p>如果constructor重要，我们可以设置constructor：Person来指代回去。</p>
<ul>
<li>原型的动态性</li>
</ul>
<p>在原型中查找值，是一次搜索。所以如果我们先创建实例，再修改原型，也能在实例中反应出来。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> Person();</div><div class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="string">"hi"</span>);</div><div class="line">&#125;;</div><div class="line">friend.sayHi();<span class="comment">//"hi"(没有问题!)</span></div></pre></td></tr></table></figure>
<p>如果重写整个原型对象就不一样了。</p>
<blockquote>
<p>这里说说啥叫重写整个原型对象<br>只是设置方法Person.prototype.sayHi=function(){}，没有重写整个对象<br>但是这样Person.prototype={}就是重写整个对象<br>重写整个prototype对象将会修改其默认的构造方式</p>
</blockquote>
<p>调用构造函数时会为实例添加一个指向最初原型的[[Prototype]]指针，而把原型修改为另外一个对象切断了构造函数与最初原型之间的联系。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123; &#125;</div><div class="line">	<span class="keyword">var</span> friend = <span class="keyword">new</span> Person();</div><div class="line">	Person.prototype = &#123;</div><div class="line">		<span class="keyword">constructor</span>: Person,</div><div class="line">		name : "Nicholas",</div><div class="line">		age : 29,</div><div class="line">		job : "Software Engineer",</div><div class="line">		sayName : function () &#123;</div><div class="line">			alert(<span class="keyword">this</span>.name);</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">friend.sayName();<span class="comment">//error</span></div></pre></td></tr></table></figure>
<p><img src="http://7fvhwe.com1.z0.glb.clouddn.com/选区_007.png" alt="重写原型对象"></p>
<p>可以看出重写原型对象切断了现有原型与任何之前已经存在的对象实例之间的联系;它们引用的仍然是最初的原型。</p>
<p><strong>我觉得就是尽量不要重写原型对象，没有啥好处还破事特多</strong></p>
<ul>
<li>原生对象的原型</li>
</ul>
<p>所有原生的引用类型（理解成对象吧）都存在原型。比如Array.prototype中有sort方法。<code>alert(typeof Array.prototype.sort);//&quot;function&quot;</code></p>
<p>这里可以利用原型给原生的引用类型添加方法。</p>
<ul>
<li><strong>原型对象的问题</strong></li>
</ul>
<p>我们的属性值，将都是引用的，不同的实例共享相同的属性值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line">Person.prototype = &#123;</div><div class="line">   <span class="keyword">constructor</span>: Person,</div><div class="line">   name : "Nicholas",</div><div class="line">   age : 29,</div><div class="line">   job : "Software Engineer",</div><div class="line">   friends : ["Shelby", "Court"],</div><div class="line">   sayName : function () &#123;</div><div class="line">   alert(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line"> &#125;;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</div><div class="line">person1.friends.push(<span class="string">"Van"</span>);</div><div class="line">alert(person1.friends);<span class="comment">//"Shelby,Court,Van"</span></div><div class="line">alert(person2.friends);<span class="comment">//"Shelby,Court,Van"</span></div><div class="line">alert(person1.friends === person2.friends); <span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>因为上面的friends是引用类型，当修改其值时，就会反应到所有实例中。</p>
<h3 id="组合使用构造函数模型和原型模式（最常用）"><a href="#组合使用构造函数模型和原型模式（最常用）" class="headerlink" title="组合使用构造函数模型和原型模式（最常用）"></a>组合使用构造函数模型和原型模式（最常用）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">  <span class="keyword">this</span>.job = job;</div><div class="line">  <span class="keyword">this</span>.friends = [<span class="string">"Shelby"</span>, <span class="string">"Court"</span>];</div><div class="line">&#125;</div><div class="line">Person.prototype = &#123;</div><div class="line">   <span class="keyword">constructor</span> : Person,</div><div class="line">   sayName : function()&#123;</div><div class="line">   alert(<span class="keyword">this</span>.name);</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</div><div class="line">person1.friends.push(<span class="string">"Van"</span>);</div><div class="line">alert(person1.friends);<span class="comment">//"Shelby,Count,Van"</span></div><div class="line">alert(person2.friends);<span class="comment">//"Shelby,Count"</span></div><div class="line">alert(person1.friends === person2.friends);<span class="comment">//false</span></div><div class="line">alert(person1.sayName === person2.sayName);<span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>上面将构造函数和原型对象结合使用，是现在js中常用的方式，解决了3个问题：</p>
<ul>
<li>对象类型的定义，对象识别问题</li>
<li>值不共享</li>
<li>方法共享</li>
</ul>
<p><strong>认可度最高的方式</strong></p>
<h3 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h3><p>在构造函数之外定义一个原型，这种方式在其他OO语言中看起来比较奇怪，下面的方法主要就是解决这个问题，将原型也放在构造函数中。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">  <span class="comment">//属性</span></div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">  <span class="keyword">this</span>.job = job;<span class="comment">//方法</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.sayName != <span class="string">"function"</span>)&#123;</div><div class="line">     Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     alert(<span class="keyword">this</span>.name);</div><div class="line">  &#125;;</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</div><div class="line">friend.sayName();</div></pre></td></tr></table></figure>
<p>注意上述代码if段，加if判断是为了让原型初始化只有一次，这样就不会在每次初始化实例的时候都创建一个sayname函数。</p>
<h3 id="寄生构造函数模式"><a href="#寄生构造函数模式" class="headerlink" title="寄生构造函数模式"></a>寄生构造函数模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">   o.name = name;</div><div class="line">   o.age = age;</div><div class="line">   o.job = job;</div><div class="line">   o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   alert(<span class="keyword">this</span>.name);</div><div class="line"> &#125;;</div><div class="line"> <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</div><div class="line">friend.sayName(); <span class="comment">//"Nicholas"</span></div></pre></td></tr></table></figure>
<p>构造函数在不返回值的情况下，默认返回新对象实例。而通过构造函数末尾添加一个return 可以重写构造函数时返回的值。</p>
<h3 id="稳妥构造函数模式"><a href="#稳妥构造函数模式" class="headerlink" title="稳妥构造函数模式"></a>稳妥构造函数模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line"><span class="comment">//创建要返回的对象</span></div><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"><span class="comment">//可以在这里定义私有变量和函数</span></div><div class="line"><span class="comment">//添加方法</span></div><div class="line">o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(name);</div><div class="line">&#125;;</div><div class="line"><span class="comment">//返回对象</span></div><div class="line"><span class="keyword">return</span> o;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意,在以这种模式创建的对象中,除了使用 sayName() 方法之外,没有其他办法访问 name 的值。<br>可以像下面使用稳妥的 Person 构造函数。<br>var friend = Person(“Nicholas”, 29, “Software Engineer”);<br>friend.sayName(); //“Nicholas”</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>上面的对象构造函数很多种，不过生产中应该主要是使用的<em>构造函数和原型结合</em>的方式。</p>
<p>其他几种有相应的优缺点，个人觉得了解就可以了。在看别人代码知道是怎么回事就行了。</p>
<p>另外构造函数和原型结合的方式一般和<a href="http://hiluluke.cn/2015/02/21/jsselfdo/">自执行匿名函数</a>结合使用，以免污染全局环境。<br>通常的形式是这样的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.age = age;</div><div class="line">		<span class="keyword">this</span>.job = job;</div><div class="line">		<span class="keyword">this</span>.friends = [<span class="string">"Shelby"</span>, <span class="string">"Court"</span>];</div><div class="line">	&#125;</div><div class="line">	Person.prototype = &#123;</div><div class="line">		<span class="keyword">constructor</span> : Person,</div><div class="line">		sayName : function()&#123;</div><div class="line">			alert(<span class="keyword">this</span>.name);</div><div class="line"> 		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">window</span>.Person = Person;</div><div class="line">&#125;)(jQuery)</div></pre></td></tr></table></figure>
<p>上面的jQuery是外部传递进去的参数，可以在内部使用。最后只将Person添加到window这样就不会污染全局作用域。</p>
<p>重新梳理一遍又有新的收获，下一篇是继承。主要的内容都是来自<a href="http://www.ituring.com.cn/book/946" target="_blank" rel="external">《javascript高级程序设计》</a>这本书，个人觉得其比《javascript权威指南》好，如果你买这种柜台书，建议买这本。</p>
<p>文章后续还会更新，有问题请在评论指正提出。</p>
<blockquote>
<p>本文为原创文章，转载请注明出处。<br>本文地址：<a href="http://hiluluke.cn/2015/10/10/js-object/">http://hiluluke.cn/2015/10/10/js-object/</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要是因为再重新读了一遍&lt;a href=&quot;http://www.ituring.com.cn/book/946&quot;&gt;《javascript高级程序设计》&lt;/a&gt;（后文称其为js高）后对js的对象有了进一步认识，所以想写点东西总结下。&lt;/p&gt;
&lt;h2 id=&quot;js对象基础&quot;&gt;&lt;a href=&quot;#js对象基础&quot; class=&quot;headerlink&quot; title=&quot;js对象基础&quot;&gt;&lt;/a&gt;js对象基础&lt;/h2&gt;&lt;h3 id=&quot;理解对象&quot;&gt;&lt;a href=&quot;#理解对象&quot; class=&quot;headerlink&quot; title=&quot;理解对象&quot;&gt;&lt;/a&gt;理解对象&lt;/h3&gt;&lt;p&gt;创建对象的方式有很多种，通常有以下三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过创建一个Object实例然后再添加属性和方法&lt;/li&gt;
&lt;li&gt;通过对象字面量的方式的方式：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	name: &lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	age: &lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	job: &lt;span class=&quot;string&quot;&gt;&quot;Software Engineer&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	sayName: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		alert(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; 	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;通过函数的方式&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name, age, job&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.job = job;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.sayName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		alert(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Software Engineer&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&quot;Greg&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Doctor&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JS" scheme="http://hiluluke.cn/categories/JS/"/>
    
    
      <category term="javascript" scheme="http://hiluluke.cn/tags/javascript/"/>
    
      <category term="前端" scheme="http://hiluluke.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>好玩的蹦床效果</title>
    <link href="http://hiluluke.cn/2015/09/10/fanyi-trampoline/"/>
    <id>http://hiluluke.cn/2015/09/10/fanyi-trampoline/</id>
    <published>2015-09-09T16:00:00.000Z</published>
    <updated>2016-08-11T13:25:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://tympanus.net/codrops/2015/03/04/playful-trampoline-effect/" target="_blank" rel="external">demo和原文在这</a></p>
<p>今天分享一个有趣的小动画。主要的想法是在切换导航（navigating）图片时模拟蹦床的弹性效果。其中的图片拖拽效果我们使用的是<a href="http://tympanus.net/codrops/2013/11/12/elastic-stack-elastic-dragging-interaction/" target="_blank" rel="external">Elastic STack</a>。而svg的动画，我们使用了<a href="http://snapsvg.io/" target="_blank" rel="external">snap.svg</a>。当然我们在整个过程中会使用css 的transitions属性。</p>
<p>demo中的图片使用得是Leonard Nimoy，是为了向他致敬，其上周逝去了。（外国程序员好有情怀）<br><a id="more"></a></p>
<p><img src="http://codropspz.tympanus.netdna-cdn.com/codrops/wp-content/uploads/2015/03/PlayfulTrampolineEffect01.png" alt=""></p>
<p>最好看看<a href="http://tympanus.net/codrops/2013/11/12/elastic-stack-elastic-dragging-interaction/" target="_blank" rel="external">Elastic Stack</a>的教程并理解其如何工作。而Elastci Stack使用了David Desandro的<a href="http://draggabilly.desandro.com/" target="_blank" rel="external">Draggabilly</a>。</p>
<p>在body里面的第一个元素是SVG形状元素，在我们切换图片时我们将控制它从一个矩形变成挤压后的矩形。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"morph-shape"</span> <span class="attr">class</span>=<span class="string">"morph-shape"</span> <span class="attr">data-morph-next</span>=<span class="string">"M301,301c0,0-83.8-21-151-21C71.8,280-1,301-1,301s21-65.7,21-151C20,79.936-1-1-1-1s73,11,151,11c85 0,151-11,151-11s-21,66.43-21,151C280,229.646,301,301,301,301z"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100%"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 300 300"</span> <span class="attr">preserveAspectRatio</span>=<span class="string">"none"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M301,301c0,0-83.8,0-151,0c-78.2,0-151,0-151,0s0-65.7,0-151C-1,79.936-1-1-1-1s73,0,151,0c85,0,151,0,151,0s0,66.43,0,151</span></span></div><div class="line">C301,229.646,301,301,301,301z" /&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>初始的矩形定义在svg的path中，然后我们将压缩后的矩形形状存储在data-morph-next中，以便后面动画使用。</p>
<p>照片堆的html结构：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stack"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"elasticstack"</span> <span class="attr">class</span>=<span class="string">"stack__images"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/1.jpg"</span> <span class="attr">alt</span>=<span class="string">"01"</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/2.png"</span> <span class="attr">alt</span>=<span class="string">"02"</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/3.jpg"</span> <span class="attr">alt</span>=<span class="string">"03"</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/4.jpg"</span> <span class="attr">alt</span>=<span class="string">"04"</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/5.png"</span> <span class="attr">alt</span>=<span class="string">"05"</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/6.png"</span> <span class="attr">alt</span>=<span class="string">"06"</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"stack-next"</span> <span class="attr">class</span>=<span class="string">"stack__next"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon icon-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"stack-titles"</span> <span class="attr">class</span>=<span class="string">"stack__titles"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"current"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></div><div class="line">			  <span class="tag">&lt;<span class="name">p</span>&gt;</span>"Once you have eliminated the impossible, whatever remains, however improbable, must be the truth."<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			  <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://drbl.in/nTZA"</span>&gt;</span>#RIPLeonardNimoy<span class="tag">&lt;/<span class="name">a</span>&gt;</span> by James Olstein<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></div><div class="line">			  <span class="tag">&lt;<span class="name">p</span>&gt;</span>"The needs of the many outweigh the needs of the few, or the one."<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			  <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://drbl.in/nUqE"</span>&gt;</span>Mr. Spock<span class="tag">&lt;/<span class="name">a</span>&gt;</span> by Mustafa Kural<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></div><div class="line">			  <span class="tag">&lt;<span class="name">p</span>&gt;</span>"Insufficient facts always invite danger."<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			  <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://drbl.in/nUhf"</span>&gt;</span>LLAP<span class="tag">&lt;/<span class="name">a</span>&gt;</span> by Sarah McKay<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></div><div class="line">			  <span class="tag">&lt;<span class="name">p</span>&gt;</span>"Without followers, evil cannot spread."<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			  <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://drbl.in/nTTO"</span>&gt;</span>RIP Leonard Nimoy<span class="tag">&lt;/<span class="name">a</span>&gt;</span> by derric<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></div><div class="line">			  <span class="tag">&lt;<span class="name">p</span>&gt;</span>"Logic is the beginning of wisdom, not the end."<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			  <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://drbl.in/nUcJ"</span>&gt;</span>#Goodnight, Spock<span class="tag">&lt;/<span class="name">a</span>&gt;</span> by Helen Tseng<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></div><div class="line">			  <span class="tag">&lt;<span class="name">p</span>&gt;</span>"Change is the essential process of all existence."<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			  <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://drbl.in/nTYY"</span>&gt;</span>RIP Spock<span class="tag">&lt;/<span class="name">a</span>&gt;</span> by Sahirul Iman<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /stack --&gt;</span></div></pre></td></tr></table></figure>
<p>上面构成了图片堆(image stack),一个导航按钮去显示下一张图片，和每个图片的一句描述的话。我们适当调整了Elastic stack，使得能够将标题从image元素中提取出来，从而能在其上应用一些不同的效果。</p>
<p>前面的svg变换图形，我们需要将它延伸到整个屏幕。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.morph-shape</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">	<span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.morph-shape</span> <span class="selector-tag">svg</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">pointer-events</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而加在图片堆上面的样式是我们改边后的Elastic Stack样式。我们在对ul中的images设置<a href="http://tympanus.net/codrops/css_reference/perspective/" target="_blank" rel="external">perspective</a>(建议了解下，3d效果会经常用到)值，这样我们就能在3d空间中定位它。下面最后两个类将会被动态加入，是我们用来创建动画效果的。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.stack</span> <span class="selector-tag">ul</span> &#123;</div><div class="line">	<span class="attribute">position</span>: relative;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">list-style</span>: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.stack</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">	<span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">ul</span><span class="selector-class">.stack__images</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">400px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">z-index</span>: <span class="number">10</span>;</div><div class="line">	<span class="attribute">perspective</span>: <span class="number">1000px</span>;</div><div class="line">	<span class="attribute">perspective-origin</span>: <span class="number">50%</span> -<span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> screen and (max-height: <span class="number">530px</span>), screen and (max-width: <span class="number">400px</span>) &#123;</div><div class="line">	<span class="selector-tag">ul</span><span class="selector-class">.stack__images</span> &#123;</div><div class="line">		<span class="attribute">width</span>: <span class="number">260px</span>;</div><div class="line">		<span class="attribute">height</span>: <span class="number">195px</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.stack__images</span> <span class="selector-tag">li</span> &#123;</div><div class="line">	<span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">z-index</span>: <span class="number">1</span>;</div><div class="line">	<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(0, 0, -180px);</div><div class="line">	<span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.stack__images</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</div><div class="line">	<span class="attribute">display</span>: block;</div><div class="line">	<span class="attribute">max-width</span>: <span class="number">100%</span>;</div><div class="line">	<span class="attribute">pointer-events</span>: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.stack__images</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">	<span class="attribute">cursor</span>: <span class="built_in">url</span>(../img/cursor_vulcan.png), auto;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.stack__images</span> <span class="selector-tag">li</span><span class="selector-pseudo">:active</span> &#123;</div><div class="line">	<span class="attribute">cursor</span>: -webkit-grabbing;</div><div class="line">	<span class="attribute">cursor</span>: grabbing;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.stack__images</span> <span class="selector-tag">li</span><span class="selector-class">.animate</span> &#123;</div><div class="line">	<span class="attribute">transition</span>: all <span class="number">0.3s</span> ease-out;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.stack__images</span> <span class="selector-tag">li</span><span class="selector-class">.move-back</span> &#123;</div><div class="line">	<span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(0.175, 0.885, 0.470, 1.515);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于其他得元素，比如导航按钮还有标题的样式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.stack__next</span> &#123;</div><div class="line">	<span class="attribute">border</span>: none;</div><div class="line">	<span class="attribute">background</span>: none;</div><div class="line">	<span class="attribute">display</span>: block;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">overflow</span>: hidden;</div><div class="line">	<span class="attribute">width</span>: <span class="number">36px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">36px</span>;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">10px</span> auto <span class="number">0</span>;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">30px</span>;</div><div class="line">	<span class="attribute">position</span>: relative;</div><div class="line">	<span class="attribute">cursor</span>: pointer;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#067ba7</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.stack__next</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.stack__next</span><span class="selector-pseudo">:focus</span> &#123;</div><div class="line">	<span class="attribute">outline</span>: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.stack__next</span> <span class="selector-tag">span</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">top</span>: <span class="number">200%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">ul</span><span class="selector-class">.stack__titles</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">18vh</span>;</div><div class="line">	<span class="attribute">max-width</span>: <span class="number">560px</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">95%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.stack__titles</span> <span class="selector-tag">blockquote</span> &#123;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">text-align</span>: center;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">1.4em</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.stack__titles</span> <span class="selector-tag">blockquote</span> <span class="selector-tag">footer</span> &#123;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">50%</span>;</div><div class="line">	<span class="attribute">padding-bottom</span>: <span class="number">1em</span>;</div><div class="line">	<span class="attribute">font-family</span>: <span class="string">'Montserrat'</span>, Arial, sans-serif;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.stack__titles</span> <span class="selector-tag">li</span> &#123;</div><div class="line">	<span class="attribute">pointer-events</span>: none;</div><div class="line">	<span class="attribute">transition</span>: opacity <span class="number">0.45s</span> ease;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.stack__titles</span> <span class="selector-tag">li</span><span class="selector-class">.current</span> &#123;</div><div class="line">	<span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">	<span class="attribute">pointer-events</span>: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>标题元素在变换时渐入渐出。</p>
<p>如果你是Yosemite系统这里的光标可能会有一个<a href="http://apple.stackexchange.com/questions/151370/my-cursor-isnt-changing-to-a-pointer-when-hovering-in-safari" target="_blank" rel="external">问题</a>。</p>
<p>最后，我们需要做的就是在样式表中定义一些<a href="http://tympanus.net/codrops/css_reference/transition/" target="_blank" rel="external">transitions</a>。当我们执行这个蹦床效果时，SVG将会改变它的填充大小，同时我们主要的内容区（container）将会使用<a href="http://tympanus.net/codrops/css_reference/transform/" target="_blank" rel="external">3D transform</a>在z轴上做3D变换从而看起来更小。对于container这段变换的样式你可以在base.css中找到。</p>
<p><img src="http://codropspz.tympanus.netdna-cdn.com/codrops/wp-content/uploads/2015/03/PlayfulTrampolineEffect02.jpg" alt=""></p>
<p>当我们点击变换的按钮（navigate）时，我们将navigate-next这个类加给body。在demo2中我们加入了一个微小的变化，我们将内容区（container）在z轴上旋转10度，在x轴上旋转-5度。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.morph-shape</span> <span class="selector-tag">svg</span> &#123;</div><div class="line">	<span class="attribute">fill</span>: <span class="number">#01AEF0</span>;</div><div class="line">	<span class="attribute">transition</span>: fill <span class="number">0.1s</span> ease-out;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.navigate-next</span> <span class="selector-class">.morph-shape</span> <span class="selector-tag">svg</span> &#123;</div><div class="line">	<span class="attribute">fill</span>: <span class="number">#01a0dc</span>;</div><div class="line">	<span class="attribute">transition-duration</span>: <span class="number">0.45s</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">	<span class="attribute">transition</span>: transform <span class="number">0.1s</span> <span class="built_in">cubic-bezier</span>(0.6, 0, 0.5, 1);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.demo-1</span><span class="selector-class">.navigate-next</span> <span class="selector-class">.container</span> &#123;</div><div class="line">	<span class="attribute">transition-duration</span>: <span class="number">0.45s</span>;</div><div class="line">	<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(0, 0, -600px);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.demo-2</span><span class="selector-class">.navigate-next</span> <span class="selector-class">.container</span> &#123;</div><div class="line">	<span class="attribute">transition-duration</span>: <span class="number">0.45s</span>;</div><div class="line">	<span class="attribute">transform</span>: <span class="built_in">rotate3d</span>(-0.5, 0, 1, -6deg) <span class="built_in">translate3d</span>(0, 0, -600px);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.demo-2</span> <span class="selector-class">.morph-shape</span> <span class="selector-tag">svg</span> &#123;</div><div class="line">	<span class="attribute">fill</span>: <span class="number">#A2CD72</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.demo-2</span><span class="selector-class">.navigate-next</span> <span class="selector-class">.morph-shape</span> <span class="selector-tag">svg</span> &#123;</div><div class="line">	<span class="attribute">fill</span>: <span class="number">#95C264</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于javascript部分，我们需要包含三个外部库：snap、modernizr、Draggabilly[<a href="http://draggabilly.desandro.com/]。另外还需要一部分[Elastic" target="_blank" rel="external">http://draggabilly.desandro.com/]。另外还需要一部分[Elastic</a> Stack](<a href="http://tympanus.net/codrops/2013/11/12/elastic-stack-elastic-dragging-interaction/)的代码。" target="_blank" rel="external">http://tympanus.net/codrops/2013/11/12/elastic-stack-elastic-dragging-interaction/)的代码。</a><br>然后我们定义好，我们的代码，管理好SVG图形变换和导航键点击之间的逻辑：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> body = <span class="built_in">document</span>.body,</div><div class="line">		titles = [].slice.call( <span class="built_in">document</span>.querySelectorAll( <span class="string">'#stack-titles &gt; li'</span> ) ),</div><div class="line">		totalTitles = titles.length,</div><div class="line">		stack = <span class="keyword">new</span> ElastiStack( <span class="built_in">document</span>.getElementById( <span class="string">'elasticstack'</span> ), &#123;</div><div class="line">			onUpdateStack : <span class="function"><span class="keyword">function</span>(<span class="params"> idx </span>) </span>&#123;</div><div class="line">				classie.remove( titles[idx === <span class="number">0</span> ? totalTitles - <span class="number">1</span> : idx - <span class="number">1</span>], <span class="string">'current'</span> );</div><div class="line">				classie.add( titles[idx], <span class="string">'current'</span> );</div><div class="line">			&#125;</div><div class="line">		&#125; ),</div><div class="line">		shapeEl = <span class="built_in">document</span>.getElementById( <span class="string">'morph-shape'</span> ),</div><div class="line">		s = Snap( shapeEl.querySelector( <span class="string">'svg'</span> ) ),</div><div class="line">		pathEl = s.select( <span class="string">'path'</span> ),</div><div class="line">		paths = &#123; </div><div class="line">			reset : pathEl.attr( <span class="string">'d'</span> ),</div><div class="line">			next  : shapeEl.getAttribute( <span class="string">'data-morph-next'</span> )</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">	<span class="built_in">document</span>.getElementById( <span class="string">'stack-next'</span> ).addEventListener( <span class="string">'mousedown'</span>, nextItem );</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">nextItem</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		classie.add( body, <span class="string">'animating'</span> );</div><div class="line">		classie.add( body, <span class="string">'navigate-next'</span> );</div><div class="line">		pathEl.stop().animate( &#123; <span class="string">'path'</span> : paths.next &#125;, <span class="number">450</span>, mina.easeinout, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			classie.remove( body, <span class="string">'navigate-next'</span> );</div><div class="line">			stack.nextItem( &#123; transform : <span class="string">'translate3d(0,-60px,400px)'</span> &#125; );</div><div class="line">			pathEl.stop().animate( &#123; <span class="string">'path'</span> : paths.reset &#125;, <span class="number">100</span>, mina.easeout, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				classie.remove( body, <span class="string">'animating'</span> );</div><div class="line">			&#125; );</div><div class="line">		&#125; );</div><div class="line">	&#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>ok，搞定了。</p>
<p><strong> 本文翻译自<a href="http://tympanus.net/codrops/2015/03/04/playful-trampoline-effect/" target="_blank" rel="external">Playful Trampoline Effect</a>,如果有问题请在评论中指出,谢谢 </strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://tympanus.net/codrops/2015/03/04/playful-trampoline-effect/&quot;&gt;demo和原文在这&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天分享一个有趣的小动画。主要的想法是在切换导航（navigating）图片时模拟蹦床的弹性效果。其中的图片拖拽效果我们使用的是&lt;a href=&quot;http://tympanus.net/codrops/2013/11/12/elastic-stack-elastic-dragging-interaction/&quot;&gt;Elastic STack&lt;/a&gt;。而svg的动画，我们使用了&lt;a href=&quot;http://snapsvg.io/&quot;&gt;snap.svg&lt;/a&gt;。当然我们在整个过程中会使用css 的transitions属性。&lt;/p&gt;
&lt;p&gt;demo中的图片使用得是Leonard Nimoy，是为了向他致敬，其上周逝去了。（外国程序员好有情怀）&lt;br&gt;
    
    </summary>
    
      <category term="HTML5" scheme="http://hiluluke.cn/categories/HTML5/"/>
    
    
      <category term="前端" scheme="http://hiluluke.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML5" scheme="http://hiluluke.cn/tags/HTML5/"/>
    
      <category term="翻译" scheme="http://hiluluke.cn/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="设计" scheme="http://hiluluke.cn/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>如何创建一个平铺背景滑动效果</title>
    <link href="http://hiluluke.cn/2015/09/03/fanyi-fourBoxs/"/>
    <id>http://hiluluke.cn/2015/09/03/fanyi-fourBoxs/</id>
    <published>2015-09-02T16:00:00.000Z</published>
    <updated>2016-08-11T13:25:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们将看看如何实现像<a href="http://www.atelier-serge-thoraval.com/fr/" target="_blank" rel="external">Serge Thoroval’s Atelier</a>中的全屏背景滑动特效。<br><a href="http://tympanus.net/codrops/2015/03/04/playful-trampoline-effect/" target="_blank" rel="external">demo和原来译文</a></p>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>为了达到这个滚动效果，我们需要一个能让我们构造4个不同“瓷砖”效果的特别标签结构，它们将使用同一张图片的不同部分。因为我们这是一个全屏滚动效果，所以我们需要确保让所有元素都延伸至全屏。为了使得我们能制定那个图片被可见，我们需要定义一个简单的初始结构并构建我们“瓷砖”的重复结构。初始结构就像这样：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"boxgallery"</span> <span class="attr">class</span>=<span class="string">"boxgallery"</span> <span class="attr">data-effect</span>=<span class="string">"effect-1"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/1.jpg"</span> <span class="attr">alt</span>=<span class="string">"Image 1"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/2.jpg"</span> <span class="attr">alt</span>=<span class="string">"Image 2"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/3.jpg"</span> <span class="attr">alt</span>=<span class="string">"Image 3"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/4.jpg"</span> <span class="attr">alt</span>=<span class="string">"Image 4"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>为了去将一张图片分成4个小瓷砖，我们为每个面板构建如下的重复结构：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"boxgallery"</span> <span class="attr">class</span>=<span class="string">"boxgallery"</span> <span class="attr">data-effect</span>=<span class="string">"effect-1"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel current"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-tile"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-img"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/1.jpg"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-tile"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-img"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/1.jpg"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-tile"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-img"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/1.jpg"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-tile"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-img"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/1.jpg"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-tile"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-img"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/2.jpg"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-tile"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-img"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/2.jpg"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-tile"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-img"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/2.jpg"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-tile"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-img"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/2.jpg"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- ... --&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- ... --&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">nav</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"prev"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>当然我们将会加上两个个按钮，这样浏览器才能实现动画。我们这里定义了data属性<code>data-effect</code>将会使我们定义一些不同的变化效果。</p>
<p>自然的，你会思考这个结构，然后你会问：为什么不使用background image 取代image元素？在尝试了很多次跨浏览器调试之后，我们得出了一个结论：在使用背景图片同时使用<code>background-size</code>    同时会导致波浪起伏的（掉帧）渐变效果。比如，当使用<code>background-size:cover</code>会导致动画效果抽搐。另外一个会导致抽搐渐变的是在执行渐变时使用百分比。第一眼看上去可能不会注意到，但是当使用像素的动画效果比较，你就会看到巨大的<a href="http://jsfiddle.net/crnacura/rmZ7B/5/" target="_blank" rel="external">差别</a>了。出于上述原因：我们将不再使用classes来控制动画变换，我们将用js脚本来控制视窗大小，并将相应的视窗大小用像素单位加在我们的瓷砖上。</p>
<p>接下来加入一些样式给他们。</p>
<h2 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h2><p>在我们脑中已经构建了一个结构，现在需要得是加入样式。</p>
<p>首先，我们是处于“全屏”模式，所以我们需要先让我们得页面元素准备好这。设置<code>html</code>和<code>body</code>和主要得conatiner高度为100%将会允许我们扩张我们得滚动效果为铺满全视口的：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-class">.container</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主要得包含块和子块都赋予绝对定位，而面板将会占住所有得宽和高。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.js</span> <span class="selector-class">.boxgallery</span>,</div><div class="line"><span class="selector-class">.js</span> <span class="selector-class">.boxgallery</span> <span class="selector-tag">div</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.js</span> <span class="selector-class">.boxgallery</span>,</div><div class="line"><span class="selector-class">.js</span> <span class="selector-class">.panel</span> &#123;</div><div class="line">	<span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为所有的动画特效将可能导致元素溢出到限制之外，所以我们将确保没有任何东西溢出：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.js</span> <span class="selector-class">.boxgallery</span>,</div><div class="line"><span class="selector-class">.bg-tile</span>,</div><div class="line"><span class="selector-class">.bg-img</span> &#123;</div><div class="line">	<span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当我们看Serge Thoroval的滚动特效时，你会发现在换屏动画的过程中，新显示的背景也会滑动进入。我们将会使用3D转换，所以我们需要设置透视（perspective）以使得我们能够在z轴能够对起产生的变换对我们可见：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.panel</span> &#123;</div><div class="line">	<span class="attribute">z-index</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">perspective</span>: <span class="number">1200px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，我们需要给“瓷砖”片设置样式。因为我们需要4个瓷砖片，所以我们给每个都设置50%的高和宽。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.bg-tile</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其他得“瓷片”：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.bg-tile</span><span class="selector-pseudo">:nth-child(2)</span>,</div><div class="line"><span class="selector-class">.bg-tile</span><span class="selector-pseudo">:nth-child(4)</span> &#123;</div><div class="line">	<span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.bg-tile</span><span class="selector-pseudo">:nth-child(3)</span>,</div><div class="line"><span class="selector-class">.bg-tile</span><span class="selector-pseudo">:nth-child(4)</span> &#123;</div><div class="line">	<span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>内部带有class为<strong>bg-img</strong>的图片将会填充整个瓷片:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.bg-img</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#999</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了让每个瓷片的图片都完全展现整个屏幕，我们需要设置img的高度和宽度是原先的两倍。如果对高度和宽度都使用百分比，高度和和宽度会将我们得图片扭曲，所以我们需要确保方向比例。我们能够只设置其中一个尺寸为200%，而另外一个定义为自动调节。但是，我们设置哪个呢？这取决于视窗是更宽还是更高。幸运的是，我们可以使用媒体查询，然后恰恰有一个属性可以帮我们做这件事:min-aspect-ratio。这个属性允许我们拿图片真正的大小作为比例并定义，所以我们可以自动计算调整以什么为百分比：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.bg-img</span> <span class="selector-tag">img</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">display</span>: block;</div><div class="line">	<span class="attribute">height</span>: <span class="number">200%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> screen and (min-aspect-ratio: <span class="number">1280</span>/<span class="number">850</span>) &#123;</div><div class="line">	<span class="selector-class">.bg-img</span> <span class="selector-tag">img</span> &#123;</div><div class="line">		<span class="attribute">width</span>: <span class="number">200%</span>;</div><div class="line">		<span class="attribute">height</span>: auto;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你能够使用上面的这个方法在其他需要调节图片与屏幕比例的地方。</p>
<p>每个图片都需要定位：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.bg-tile</span><span class="selector-pseudo">:nth-child(2)</span> <span class="selector-class">.bg-img</span> <span class="selector-tag">img</span>,</div><div class="line"><span class="selector-class">.bg-tile</span><span class="selector-pseudo">:nth-child(4)</span> <span class="selector-class">.bg-img</span> <span class="selector-tag">img</span> &#123;</div><div class="line">	<span class="attribute">left</span>: -<span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.bg-tile</span><span class="selector-pseudo">:nth-child(3)</span> <span class="selector-class">.bg-img</span> <span class="selector-tag">img</span>,</div><div class="line"><span class="selector-class">.bg-tile</span><span class="selector-pseudo">:nth-child(4)</span> <span class="selector-class">.bg-img</span> <span class="selector-tag">img</span> &#123;</div><div class="line">	<span class="attribute">top</span>: -<span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>两边的button箭头使用<a href="http://tympanus.net/Development/ArrowNavigationStyles/" target="_blank" rel="external">Arrow Navigation Styles</a>中的“Fill Path”样式。、</p>
<p>接下来，让我们定义当我们翻页（navigate）时发生什么？</p>
<p>首先，我们需要设置current panel的z-index，让它处于我们其他元素得上面。因为我们设置了所有得（panel）面板得z-index为0，所以我们能只用比如1的值。但是因为我们有一个active panel需要设置在current panel下面，所以我们设置z-index如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.panel</span><span class="selector-class">.current</span> &#123;</div><div class="line">	<span class="attribute">z-index</span>: <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.panel</span><span class="selector-class">.active</span> &#123;</div><div class="line">	<span class="attribute">z-index</span>: <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就能够保证current在所有元素上面，而新加入得元素在其下面。</p>
<p>鉴于我们要使用脚本控制每个带有“bg-img”的元素加入3D转换效果（之前我们提过，我们要用像素作为转换的参数，因此需要window的宽和高），我们任然需要设置一些东西在我们得样式表中，比如过渡效果和新panel的动画。</p>
<p>因此，让我们定义一个transition给我们的transform元素并带有过渡时间和松弛度得参数：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.panel</span><span class="selector-class">.current</span> <span class="selector-class">.bg-img</span> &#123;</div><div class="line">	<span class="attribute">transition</span>: transform <span class="number">1.1s</span> ease-in-out;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于第一个特效（螺旋效果）和第二个（将瓷片移除到外部），我们想让起动画开始有一个按比例缩减得效果：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.boxgallery</span><span class="selector-attr">[data-effect="effect-1"]</span> <span class="selector-class">.panel</span><span class="selector-class">.active</span> <span class="selector-class">.bg-tile</span>,</div><div class="line"><span class="selector-class">.boxgallery</span><span class="selector-attr">[data-effect="effect-2"]</span> <span class="selector-class">.panel</span><span class="selector-class">.active</span> <span class="selector-class">.bg-tile</span> &#123;</div><div class="line">	<span class="attribute">animation</span>: scaleDown <span class="number">1.1s</span> ease-in-out;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> scaleDown &#123;</div><div class="line">	<span class="selector-tag">from</span> &#123; <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(0,0,380px); &#125;</div><div class="line">	<span class="selector-tag">to</span> &#123; <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(0,0,0); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们给每个瓷片的子元素加入了一点动画延迟，然后使用cubic-bezier让所有动画都快一点。这个变动将会使得“小瓷片”上下渐变消失时间不同：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Variation 2 */</span></div><div class="line"></div><div class="line"><span class="selector-class">.boxgallery</span><span class="selector-attr">[data-effect="effect-2"]</span> <span class="selector-class">.panel</span><span class="selector-class">.current</span> <span class="selector-class">.bg-img</span> &#123;</div><div class="line">	<span class="attribute">transition</span>: transform <span class="number">0.9s</span> <span class="built_in">cubic-bezier</span>(0.7,0,0.3,1);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.boxgallery</span><span class="selector-attr">[data-effect="effect-2"]</span> <span class="selector-class">.panel</span><span class="selector-class">.current</span> <span class="selector-class">.bg-tile</span><span class="selector-pseudo">:nth-child(2)</span> <span class="selector-class">.bg-img</span> &#123;</div><div class="line">	<span class="attribute">transition-delay</span>: <span class="number">0.15s</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.boxgallery</span><span class="selector-attr">[data-effect="effect-2"]</span> <span class="selector-class">.panel</span><span class="selector-class">.current</span> <span class="selector-class">.bg-tile</span><span class="selector-pseudo">:nth-child(3)</span> <span class="selector-class">.bg-img</span> &#123;</div><div class="line">	<span class="attribute">transition-delay</span>: <span class="number">0.3s</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.boxgallery</span><span class="selector-attr">[data-effect="effect-2"]</span> <span class="selector-class">.panel</span><span class="selector-class">.current</span> <span class="selector-class">.bg-tile</span><span class="selector-pseudo">:nth-child(4)</span> <span class="selector-class">.bg-img</span> &#123;</div><div class="line">	<span class="attribute">transition-delay</span>: <span class="number">0.45s</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第三部分在新面板加入时使用一个覆盖层渐出达到模糊效果：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Variation 3 */</span></div><div class="line"></div><div class="line"><span class="selector-class">.boxgallery</span><span class="selector-attr">[data-effect="effect-3"]</span> <span class="selector-class">.panel</span><span class="selector-pseudo">::after</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="built_in">rgba</span>(0,0,0,0.8);</div><div class="line">	<span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">	<span class="attribute">transition</span>: opacity <span class="number">1.1s</span> ease-in-out;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.boxgallery</span><span class="selector-attr">[data-effect="effect-3"]</span> <span class="selector-class">.panel</span><span class="selector-class">.current</span><span class="selector-pseudo">::after</span>,</div><div class="line"><span class="selector-class">.boxgallery</span><span class="selector-attr">[data-effect="effect-3"]</span> <span class="selector-class">.panel</span><span class="selector-class">.active</span><span class="selector-pseudo">::after</span> &#123;</div><div class="line">	<span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.boxgallery</span><span class="selector-attr">[data-effect="effect-3"]</span> <span class="selector-class">.panel</span><span class="selector-class">.current</span><span class="selector-pseudo">::after</span> &#123;</div><div class="line">	<span class="attribute">transition</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们同时也使用cubic-bezier和延迟一些时间：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.boxgallery</span><span class="selector-attr">[data-effect="effect-3"]</span> <span class="selector-class">.panel</span><span class="selector-class">.current</span> <span class="selector-class">.bg-img</span> &#123;</div><div class="line">	<span class="attribute">transition</span>: transform <span class="number">1.1s</span> <span class="built_in">cubic-bezier</span>(0.7,0,0.3,1);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.boxgallery</span><span class="selector-attr">[data-effect="effect-3"]</span> <span class="selector-class">.panel</span><span class="selector-class">.current</span> <span class="selector-class">.bg-tile</span><span class="selector-pseudo">:nth-child(2)</span> <span class="selector-class">.bg-img</span> &#123;</div><div class="line">	<span class="attribute">transition-delay</span>: <span class="number">0.15s</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.boxgallery</span><span class="selector-attr">[data-effect="effect-3"]</span> <span class="selector-class">.panel</span><span class="selector-class">.current</span> <span class="selector-class">.bg-tile</span><span class="selector-pseudo">:nth-child(3)</span> <span class="selector-class">.bg-img</span> &#123;</div><div class="line">	<span class="attribute">transition-delay</span>: <span class="number">0.3s</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.boxgallery</span><span class="selector-attr">[data-effect="effect-3"]</span> <span class="selector-class">.panel</span><span class="selector-class">.current</span> <span class="selector-class">.bg-tile</span><span class="selector-pseudo">:nth-child(4)</span> <span class="selector-class">.bg-img</span> &#123;</div><div class="line">	<span class="attribute">transition-delay</span>: <span class="number">0.45s</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h2><p>就像之前提到过的，我们选择使用js来操作动画，目的是使用以像素宽高的动画。当然我们也可以选择在css中使用百分比为的动画，那样会更加方便，但是却使我们的动画抽搐。</p>
<p>首先看看这个定义函数。</p>
<p>我们首先开始定义我们将赋予panels滑动的变换动画。我们需要分别制定左右箭头的变换。让我们定义一个合适的<strong>setTransforms</strong>函数结构。</p>
<p>接下来，我们获取特效类别从<strong>data-effect</strong>属性。这个将指明我们调用文件是实现定义的哪个文件。</p>
<p>然后，我们初始化一些变量，然后创建一些四个盒子必要的DOM结构。对于那个，每个面板的图片被4个分割部分所替代，每个部分都有同样得src。我们同样加入前后箭头<code>nav</code>节点。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">BoxesFx.prototype._init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// set transforms configuration</span></div><div class="line">	<span class="keyword">this</span>._setTransforms();</div><div class="line">	<span class="comment">// which effect</span></div><div class="line">	<span class="keyword">this</span>.effect = <span class="keyword">this</span>.el.getAttribute( <span class="string">'data-effect'</span> ) || <span class="string">'effect-1'</span>;</div><div class="line">	<span class="comment">// check if animating</span></div><div class="line">	<span class="keyword">this</span>.isAnimating = <span class="literal">false</span>;</div><div class="line">	<span class="comment">// the panels</span></div><div class="line">	<span class="keyword">this</span>.panels = [].slice.call( <span class="keyword">this</span>.el.querySelectorAll( <span class="string">'.panel'</span> ) );</div><div class="line">	<span class="comment">// total number of panels (4 for this demo)</span></div><div class="line">	<span class="comment">//this.panelsCount = this.panels.length;</span></div><div class="line">	<span class="keyword">this</span>.panelsCount = <span class="number">4</span>;</div><div class="line">	<span class="comment">// current panel´s index</span></div><div class="line">	<span class="keyword">this</span>.current = <span class="number">0</span>;</div><div class="line">	classie.add( <span class="keyword">this</span>.panels[<span class="number">0</span>], <span class="string">'current'</span> );</div><div class="line">	<span class="comment">// replace image with 4 divs, each including the image</span></div><div class="line">	<span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">	<span class="keyword">this</span>.panels.forEach( <span class="function"><span class="keyword">function</span>(<span class="params"> panel </span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> img = panel.querySelector( <span class="string">'img'</span> ), imgReplacement = <span class="string">''</span>;</div><div class="line">		<span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; self.panelsCount; ++i ) &#123;</div><div class="line">			imgReplacement += <span class="string">'&lt;div class="bg-tile"&gt;&lt;div class="bg-img"&gt;&lt;img src="'</span> + img.src + <span class="string">'" /&gt;&lt;/div&gt;&lt;/div&gt;'</span></div><div class="line">		&#125;</div><div class="line">		panel.removeChild( img );</div><div class="line">		panel.innerHTML = imgReplacement + panel.innerHTML;</div><div class="line">	&#125; );</div><div class="line">	<span class="comment">// add navigation element</span></div><div class="line">	<span class="keyword">this</span>.nav = <span class="built_in">document</span>.createElement( <span class="string">'nav'</span> );</div><div class="line">	<span class="keyword">this</span>.nav.innerHTML = <span class="string">'&lt;span class="prev"&gt;&lt;i&gt;&lt;/i&gt;&lt;/span&gt;&lt;span class="next"&gt;&lt;i&gt;&lt;/i&gt;&lt;/span&gt;'</span>;</div><div class="line">	<span class="keyword">this</span>.el.appendChild( <span class="keyword">this</span>.nav );</div><div class="line">	<span class="comment">// initialize events</span></div><div class="line">	<span class="keyword">this</span>._initEvents();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>动画中变化的变量是使用window得<code>width</code>和<code>height</code>。我们多加了10像素，这样动画变换就不会在最后可看见的部分结束，并使得其更加顺滑：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">BoxesFx.prototype._setTransforms = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.transforms = &#123;</div><div class="line">		<span class="string">'effect-1'</span> : &#123;</div><div class="line">			<span class="string">'next'</span> : [</div><div class="line">				<span class="string">'translate3d(0, '</span> + (win.height/<span class="number">2</span>+<span class="number">10</span>) + <span class="string">'px, 0)'</span>, <span class="comment">// transforms for panel 1</span></div><div class="line">				<span class="string">'translate3d(-'</span> + (win.width/<span class="number">2</span>+<span class="number">10</span>) + <span class="string">'px, 0, 0)'</span>, <span class="comment">// transforms for panel 2</span></div><div class="line">				<span class="string">'translate3d('</span> + (win.width/<span class="number">2</span>+<span class="number">10</span>) + <span class="string">'px, 0, 0)'</span>, <span class="comment">// transforms for panel 3</span></div><div class="line">				<span class="string">'translate3d(0, -'</span> + (win.height/<span class="number">2</span>+<span class="number">10</span>) + <span class="string">'px, 0)'</span> <span class="comment">// transforms for panel 4</span></div><div class="line">			],</div><div class="line">			<span class="string">'prev'</span> : [</div><div class="line">				<span class="string">'translate3d('</span> + (win.width/<span class="number">2</span>+<span class="number">10</span>) + <span class="string">'px, 0, 0)'</span>,</div><div class="line">				<span class="string">'translate3d(0, '</span> + (win.height/<span class="number">2</span>+<span class="number">10</span>) + <span class="string">'px, 0)'</span>,</div><div class="line">				<span class="string">'translate3d(0, -'</span> + (win.height/<span class="number">2</span>+<span class="number">10</span>) + <span class="string">'px, 0)'</span>,</div><div class="line">				<span class="string">'translate3d(-'</span> + (win.width/<span class="number">2</span>+<span class="number">10</span>) + <span class="string">'px, 0, 0)'</span></div><div class="line">			]</div><div class="line">		&#125;,</div><div class="line">		<span class="string">'effect-2'</span> : &#123;</div><div class="line">			<span class="string">'next'</span> : [</div><div class="line">				<span class="string">'translate3d(-'</span> + (win.width/<span class="number">2</span>+<span class="number">10</span>) + <span class="string">'px, 0, 0)'</span>,</div><div class="line">				<span class="string">'translate3d('</span> + (win.width/<span class="number">2</span>+<span class="number">10</span>) + <span class="string">'px, 0, 0)'</span>,</div><div class="line">				<span class="string">'translate3d(-'</span> + (win.width/<span class="number">2</span>+<span class="number">10</span>) + <span class="string">'px, 0, 0)'</span>,</div><div class="line">				<span class="string">'translate3d('</span> + (win.width/<span class="number">2</span>+<span class="number">10</span>) + <span class="string">'px, 0, 0)'</span></div><div class="line">			],</div><div class="line">			<span class="string">'prev'</span> : [</div><div class="line">				<span class="string">'translate3d(0,-'</span> + (win.height/<span class="number">2</span>+<span class="number">10</span>) + <span class="string">'px, 0)'</span>,</div><div class="line">				<span class="string">'translate3d(0,-'</span> + (win.height/<span class="number">2</span>+<span class="number">10</span>) + <span class="string">'px, 0)'</span>,</div><div class="line">				<span class="string">'translate3d(0,'</span> + (win.height/<span class="number">2</span>+<span class="number">10</span>) + <span class="string">'px, 0)'</span>,</div><div class="line">				<span class="string">'translate3d(0,'</span> + (win.height/<span class="number">2</span>+<span class="number">10</span>) + <span class="string">'px, 0)'</span></div><div class="line">			]</div><div class="line">		&#125;,</div><div class="line">		<span class="string">'effect-3'</span> : &#123;</div><div class="line">			<span class="string">'next'</span> : [</div><div class="line">				<span class="string">'translate3d(0,'</span> + (win.height/<span class="number">2</span>+<span class="number">10</span>) + <span class="string">'px, 0)'</span>,</div><div class="line">				<span class="string">'translate3d(0,'</span> + (win.height/<span class="number">2</span>+<span class="number">10</span>) + <span class="string">'px, 0)'</span>,</div><div class="line">				<span class="string">'translate3d(0,'</span> + (win.height/<span class="number">2</span>+<span class="number">10</span>) + <span class="string">'px, 0)'</span>,</div><div class="line">				<span class="string">'translate3d(0,'</span> + (win.height/<span class="number">2</span>+<span class="number">10</span>) + <span class="string">'px, 0)'</span></div><div class="line">			],</div><div class="line">			<span class="string">'prev'</span> : [</div><div class="line">				<span class="string">'translate3d(0,-'</span> + (win.height/<span class="number">2</span>+<span class="number">10</span>) + <span class="string">'px, 0)'</span>,</div><div class="line">				<span class="string">'translate3d(0,-'</span> + (win.height/<span class="number">2</span>+<span class="number">10</span>) + <span class="string">'px, 0)'</span>,</div><div class="line">				<span class="string">'translate3d(0,-'</span> + (win.height/<span class="number">2</span>+<span class="number">10</span>) + <span class="string">'px, 0)'</span>,</div><div class="line">				<span class="string">'translate3d(0,-'</span> + (win.height/<span class="number">2</span>+<span class="number">10</span>) + <span class="string">'px, 0)'</span></div><div class="line">			]</div><div class="line">		&#125;</div><div class="line">	&#125;;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来要做得就是初始话nav箭头事件，和调整window大小得事件:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">BoxesFx.prototype._initEvents = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> self = <span class="keyword">this</span>, navctrls = <span class="keyword">this</span>.nav.children;</div><div class="line">	<span class="comment">// previous action</span></div><div class="line">	navctrls[<span class="number">0</span>].addEventListener( <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; self._navigate(<span class="string">'prev'</span>) &#125; );</div><div class="line">	<span class="comment">// next action</span></div><div class="line">	navctrls[<span class="number">1</span>].addEventListener( <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; self._navigate(<span class="string">'next'</span>) &#125; );</div><div class="line">	<span class="comment">// window resize</span></div><div class="line">	<span class="built_in">window</span>.addEventListener( <span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; self._resizeHandler(); &#125; );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再让我们来看看navigate函数。</p>
<p>首先，我们得到两者，现在展现的面板和即将浮现的面板。我们当然需要重新设置current变量。</p>
<p>接下来，我们加入active类给现在的（即将浮现的）面板去触发在css中定义过对的动画。我们最后将我们之前定义的3D变换给现在的面板。这将使得我们4个面板变化，并使后面得面板滑动浮现。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">BoxesFx.prototype._navigate = <span class="function"><span class="keyword">function</span>(<span class="params"> dir </span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span>( <span class="keyword">this</span>.isAnimating ) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	<span class="keyword">this</span>.isAnimating = <span class="literal">true</span>;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> self = <span class="keyword">this</span>, currentPanel = <span class="keyword">this</span>.panels[ <span class="keyword">this</span>.current ];</div><div class="line"></div><div class="line">	<span class="keyword">if</span>( dir === <span class="string">'next'</span> ) &#123;</div><div class="line">		<span class="keyword">this</span>.current = <span class="keyword">this</span>.current &lt; <span class="keyword">this</span>.panelsCount - <span class="number">1</span> ? <span class="keyword">this</span>.current + <span class="number">1</span> : <span class="number">0</span>;			</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">this</span>.current = <span class="keyword">this</span>.current &gt; <span class="number">0</span> ? <span class="keyword">this</span>.current - <span class="number">1</span> : <span class="keyword">this</span>.panelsCount - <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// next panel to be shown</span></div><div class="line">	<span class="keyword">var</span> nextPanel = <span class="keyword">this</span>.panels[ <span class="keyword">this</span>.current ];</div><div class="line">	<span class="comment">// add class active to the next panel to trigger its animation</span></div><div class="line">	classie.add( nextPanel, <span class="string">'active'</span> );</div><div class="line">	<span class="comment">// apply the transforms to the current panel</span></div><div class="line">	<span class="keyword">this</span>._applyTransforms( currentPanel, dir );</div><div class="line"></div><div class="line">	<span class="comment">// let´s track the number of transitions ended per panel</span></div><div class="line">	<span class="keyword">var</span> cntTransTotal = <span class="number">0</span>,</div><div class="line">		</div><div class="line">		<span class="comment">// transition end event function</span></div><div class="line">		onEndTransitionFn = <span class="function"><span class="keyword">function</span>(<span class="params"> ev </span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span>( ev &amp;&amp; !classie.has( ev.target, <span class="string">'bg-img'</span> ) ) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">			<span class="comment">// return if not all panel transitions ended</span></div><div class="line">			++cntTransTotal;</div><div class="line">			<span class="keyword">if</span>( cntTransTotal &lt; self.panelsCount ) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">			<span class="keyword">if</span>( support.transitions ) &#123;</div><div class="line">				<span class="keyword">this</span>.removeEventListener( transEndEventName, onEndTransitionFn );</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">// remove current class from current panel and add it to the next one</span></div><div class="line">			classie.remove( currentPanel, <span class="string">'current'</span> );</div><div class="line">			classie.add( nextPanel, <span class="string">'current'</span> );</div><div class="line">			<span class="comment">// reset transforms for the currentPanel</span></div><div class="line">			self._resetTransforms( currentPanel );</div><div class="line">			<span class="comment">// remove class active</span></div><div class="line">			classie.remove( nextPanel, <span class="string">'active'</span> );</div><div class="line">			self.isAnimating = <span class="literal">false</span>;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>( support.transitions ) &#123;</div><div class="line">		currentPanel.addEventListener( transEndEventName, onEndTransitionFn );</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		onEndTransitionFn();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">BoxesFx.prototype._applyTransforms = <span class="function"><span class="keyword">function</span>(<span class="params"> panel, dir </span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">	[].slice.call( panel.querySelectorAll( <span class="string">'div.bg-img'</span> ) ).forEach( <span class="function"><span class="keyword">function</span>(<span class="params"> tile, pos </span>) </span>&#123;</div><div class="line">		tile.style.WebkitTransform = self.transforms[self.effect][dir][pos];</div><div class="line">		tile.style.transform = self.transforms[self.effect][dir][pos];</div><div class="line">	&#125; );</div><div class="line">&#125;</div><div class="line"></div><div class="line">BoxesFx.prototype._resetTransforms = <span class="function"><span class="keyword">function</span>(<span class="params"> panel </span>) </span>&#123;</div><div class="line">	[].slice.call( panel.querySelectorAll( <span class="string">'div.bg-img'</span> ) ).forEach( <span class="function"><span class="keyword">function</span>(<span class="params"> tile </span>) </span>&#123;</div><div class="line">		tile.style.WebkitTransform = <span class="string">'none'</span>;</div><div class="line">		tile.style.transform = <span class="string">'none'</span>;</div><div class="line">	&#125; );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong> 本文翻译自<a href="http://tympanus.net/codrops/2014/06/11/how-to-create-a-tiled-background-slideshow/" target="_blank" rel="external">How to Create a Tiled Background Slideshow</a>,如果有问题请在评论中指出,谢谢 </strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天我们将看看如何实现像&lt;a href=&quot;http://www.atelier-serge-thoraval.com/fr/&quot;&gt;Serge Thoroval’s Atelier&lt;/a&gt;中的全屏背景滑动特效。&lt;br&gt;&lt;a href=&quot;http://tympanus.net/codrops/2015/03/04/playful-trampoline-effect/&quot;&gt;demo和原来译文&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;标签&quot;&gt;&lt;a href=&quot;#标签&quot; class=&quot;headerlink&quot; title=&quot;标签&quot;&gt;&lt;/a&gt;标签&lt;/h2&gt;&lt;p&gt;为了达到这个滚动效果，我们需要一个能让我们构造4个不同“瓷砖”效果的特别标签结构，它们将使用同一张图片的不同部分。因为我们这是一个全屏滚动效果，所以我们需要确保让所有元素都延伸至全屏。为了使得我们能制定那个图片被可见，我们需要定义一个简单的初始结构并构建我们“瓷砖”的重复结构。初始结构就像这样：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;boxgallery&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;boxgallery&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-effect&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;effect-1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;panel&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;img/1.jpg&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Image 1&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;panel&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;img/2.jpg&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Image 2&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;panel&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;img/3.jpg&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Image 3&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;panel&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;img/4.jpg&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Image 4&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了去将一张图片分成4个小瓷砖，我们为每个面板构建如下的重复结构：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;boxgallery&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;boxgallery&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-effect&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;effect-1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;panel current&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bg-tile&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bg-img&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;img/1.jpg&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bg-tile&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bg-img&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;img/1.jpg&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bg-tile&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bg-img&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;img/1.jpg&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bg-tile&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bg-img&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;img/1.jpg&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;panel&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bg-tile&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bg-img&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;img/2.jpg&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bg-tile&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bg-img&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;img/2.jpg&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bg-tile&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bg-img&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;img/2.jpg&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bg-tile&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bg-img&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;img/2.jpg&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;panel&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;panel&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;prev&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;next&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="HTML5" scheme="http://hiluluke.cn/categories/HTML5/"/>
    
    
      <category term="前端" scheme="http://hiluluke.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML5" scheme="http://hiluluke.cn/tags/HTML5/"/>
    
      <category term="翻译" scheme="http://hiluluke.cn/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="设计" scheme="http://hiluluke.cn/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
</feed>
